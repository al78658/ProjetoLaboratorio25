@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Criar Competição</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        .form-container {
            width: 100%;
            display: flex;
            justify-content: center;
            padding: 60px 20px;
        }

        .form-box {
            width: 100%;
            max-width: 520px; /* volta ao tamanho inicial horizontal */
            text-align: center;
        }

        h2 {
            font-size: 40px;
            margin-bottom: 50px;
            color: black;
        }

        .form-group {
            margin-bottom: 36px;
            text-align: left;
        }

            .form-group label {
                font-size: 24px;
                margin-bottom: 12px;
                display: block;
                color: black;
            }

            .form-group input,
            .form-group select {
                width: 100%;
                padding: 20px;
                font-size: 20px;
                border-radius: 10px;
                border: 2px solid #333;
            }

        .submit-button {
            width: 100%;
            font-size: 24px;
            padding: 20px 0;
            background: white;
            border: 2px solid black;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);
            margin-top: 30px;
        }

            .submit-button:hover {
                background-color: #dcdcdc;
            }
            
        .reset-button {
            width: 100%;
            font-size: 16px;
            padding: 12px 0;
            background: #f0f0f0;
            border: 1px solid #999;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 15px;
            color: #555;
        }
        
        .reset-button:hover {
            background-color: #e0e0e0;
        }
        
        .continue-button {
            width: 100%;
            font-size: 18px;
            padding: 15px 0;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .continue-button:hover {
            background-color: #45a049;
        }
        
        .info-message {
            background-color: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 10px 15px;
            margin-bottom: 20px;
            font-size: 16px;
            color: #495057;
            text-align: left;
            border-radius: 0 4px 4px 0;
        }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 700px) {
            .top-left-logo img

        {
            width: 100px;
        }

        h2 {
            font-size: 32px;
        }

        .form-group label,
        .form-group input,
        .form-group select,
        .submit-button {
            font-size: 18px;
        }

        .form-box {
            padding: 20px;
        }

        .back-button {
            font-size: 14px;
            padding: 10px 16px;
        }

        }
    </style>
</head>
<body>

    <!-- Logotipo -->
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Navegação de Criação de Competição -->
    @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Definir Competição", edicao = false })

    <!-- Conteúdo -->
    <div class="form-container">
        <div class="form-box">
            <h2>Criar Competição</h2>

            <form asp-controller="CriarCompeticao" asp-action="Criar" method="post" id="formCriarCompeticao">
                @if (!ViewData.ModelState.IsValid)
                {
                    foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div style="color: red; margin-bottom: 10px; font-size: 18px;">@error.ErrorMessage</div>
                    }
                }
                <div class="form-group">
                    <label for="nome">Nome da Competição</label>
                    <input type="text" id="nome" name="nome" required value="@(ViewData["nome"] ?? "")" autocomplete="off" />
                </div>

                <div class="form-group">
                    <label for="tipo">Tipo de Competição</label>
                    <select id="tipo" name="tipo" required>
                        <option value="individual">Individual</option>
                        <option value="equipas">Equipas</option>
                    </select>
                </div>

                <button type="button" class="submit-button" id="btnProximo">Próximo</button>
            </form>
            <script>
                document.getElementById('btnProximo').addEventListener('click', async function (e) {
                    const nome = document.getElementById('nome').value.trim();
                    if (!nome) return;
                    // Verificação AJAX se já existe competição
                    const response = await fetch('/Competicoes/ExisteNome?nome=' + encodeURIComponent(nome));
                    const existe = await response.json();
                    if (existe) {
                        // Mostra erro sem submeter
                        let erroDiv = document.getElementById('erroNome');
                        if (!erroDiv) {
                            erroDiv = document.createElement('div');
                            erroDiv.id = 'erroNome';
                            erroDiv.style.color = 'red';
                            erroDiv.style.marginBottom = '10px';
                            erroDiv.style.fontSize = '18px';
                            document.querySelector('.form-box form').insertBefore(erroDiv, document.querySelector('.form-group'));
                        }
                        erroDiv.textContent = 'Já existe uma competição com esse nome. Por favor escolha outro nome.';
                        return;
                    }
                    // Se não existir, salva os dados e submete o form
                    const tipo = document.getElementById('tipo').value;
                    localStorage.setItem('nomeCompeticao', nome);
                    localStorage.setItem('tipoCompeticao', tipo);
                    document.getElementById('formCriarCompeticao').submit();
                });
            </script>



        </div>
    </div>

    <!-- Botão Voltar -->   
    <a href="/Home" class="back-button">&lt;Voltar</a>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const nomeInput = document.getElementById('nome');
                const tipoSelect = document.getElementById('tipo');
                
                // Verificar se estamos em um processo de criação em andamento
                const nomeCompeticao = localStorage.getItem('nomeCompeticao');
                const tipoCompeticao = localStorage.getItem('tipoCompeticao');
                
                // Verificar se estamos iniciando uma nova competição ou editando
                const urlParams = new URLSearchParams(window.location.search);
                const isEditing = urlParams.has('edit') || '@ViewBag.CompeticaoId' || localStorage.getItem('competicaoId');
                const isNewCompetition = urlParams.has('new');
                
                if (isNewCompetition) {
                    // Se estamos explicitamente iniciando uma nova competição, limpar dados anteriores
                    localStorage.removeItem('jogadoresList');
                    localStorage.removeItem('jogadoresParaEmparelhar');
                    localStorage.removeItem('formatosSelecionados');
                    localStorage.removeItem('numFases');
                    localStorage.removeItem('nomeCompeticao');
                    localStorage.removeItem('tipoCompeticao');
                    localStorage.removeItem('competicaoId');
                    console.log('Iniciando nova competição, dados anteriores limpos');
                } else if (nomeCompeticao && tipoCompeticao) {
                    // Se já temos dados no localStorage, preencher os campos
                    nomeInput.value = nomeCompeticao;
                    tipoSelect.value = tipoCompeticao;
                    console.log('Continuando competição existente:', nomeCompeticao);
                } else if (!isEditing) {
                    // Se não estamos editando e não temos dados, limpar para começar nova
                    localStorage.removeItem('jogadoresList');
                    localStorage.removeItem('jogadoresParaEmparelhar');
                    localStorage.removeItem('formatosSelecionados');
                    localStorage.removeItem('numFases');
                    localStorage.removeItem('nomeCompeticao');
                    localStorage.removeItem('tipoCompeticao');
                    localStorage.removeItem('competicaoId');
                    console.log('Iniciando nova competição, dados anteriores limpos');
                } else {
                    console.log('Editando competição existente, mantendo dados');
                }
            });
            
            document.getElementById('formCriarCompeticao').addEventListener('submit', function (e) {
                // Guardar o nome da competição e tipo no localStorage antes de submeter
                var nome = document.getElementById('nome').value;
                var tipo = document.getElementById('tipo').value;
                
                if (!nome || nome.trim() === '') {
                    e.preventDefault();
                    alert('Por favor, insira um nome para a competição.');
                    return false;
                }
                
                // Verificar se estamos atualizando uma competição existente ou criando uma nova
                const isUpdating = localStorage.getItem('nomeCompeticao') && 
                                  (localStorage.getItem('formatosSelecionados') || 
                                   localStorage.getItem('jogadoresList'));
                
                if (isUpdating) {
                    // Se estamos apenas atualizando, perguntar ao usuário
                    if (!confirm('Você já tem uma competição em andamento. Deseja atualizar os dados desta competição?')) {
                        e.preventDefault();
                        return false;
                    }
                }
                
                // Atualizar os dados no localStorage
                localStorage.setItem('nomeCompeticao', nome);
                localStorage.setItem('tipoCompeticao', tipo);
                localStorage.setItem('ultimaAtualizacao', new Date().toISOString());
                
                // Se já temos um ID de competição do servidor, armazená-lo também
                @if (ViewBag.CompeticaoId != null) {
                    <text>
                    localStorage.setItem('competicaoId', '@ViewBag.CompeticaoId');
                    </text>
                }
                
                // Permitir o submit normal
                console.log('Dados da competição atualizados:', { nome, tipo });
            });
            

    </script>


</body>
</html>
