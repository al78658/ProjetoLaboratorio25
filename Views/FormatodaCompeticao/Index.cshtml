@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Formato da Competi√ß√£o</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            position: relative;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        .main-container {
            margin-top: 80px;
            margin-bottom: 60px;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 40px 20px;
            width: 90%;
            max-width: 850px; /* reduzido */
            margin-left: auto;
            margin-right: auto;
        }

        h2 {
            font-size: 34px;
            color: black;
            margin-bottom: 32px;
            text-align: center;
        }

        .fase-selector {
            text-align: center;
            margin-bottom: 30px;
        }

            .fase-selector label {
                font-size: 20px;
                margin-right: 10px;
            }

            .fase-selector input {
                width: 60px;
                font-size: 18px;
                padding: 6px;
                text-align: center;
            }

        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            opacity: 1 !important;
        }

        table {
            width: 100%;
            max-width: 800px; /* reduzido */
            border-collapse: collapse;
            margin-top: 20px;
            font-size: 16px;
            background-color: white;
        }

        thead {
            background-color: #ccc;
        }

        th, td {
            padding: 12px 8px;
            border: 1px solid #333;
            text-align: center;
        }

        select {
            font-size: 15px;
            padding: 6px;
            border-radius: 6px;
        }

        .config-button {
            padding: 8px 14px;
            font-size: 15px;
            border: 1px solid black;
            background: white;
            border-radius: 6px;
            cursor: pointer;
            margin-right: 6px;
        }

        .config-icon {
            font-size: 18px;
            cursor: pointer;
        }

        .next-button {
            margin-top: 40px;
            font-size: 20px;
            padding: 14px 42px;
            border: 2px solid black;
            background: white;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 3px 3px 6px rgba(0,0,0,0.2);
        }

            .next-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 40px;
            bottom: 40px;
            padding: 12px 24px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 768px) {
            h2

        {
            font-size: 26px;
        }

        .fase-selector label {
            font-size: 16px;
        }

        .next-button {
            font-size: 18px;
            padding: 12px 30px;
        }

        table {
            font-size: 14px;
        }

        }

        /* Adicionar estilos para o menu lateral */
        .edit-sidebar {
            position: fixed;
            right: 20px;
            top: 120px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            padding: 20px;
            width: 250px;
            z-index: 100;
        }
        
        .edit-sidebar-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        
        .edit-sidebar-steps {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .edit-sidebar-step {
            display: flex;
            align-items: center;
            padding: 10px 12px;
            border-radius: 6px;
            background-color: #f8f9fa;
            text-decoration: none;
            color: #333;
            transition: background-color 0.2s;
            cursor: pointer;
            border: 1px solid #ddd;
        }
        
        .edit-sidebar-step:hover {
            background-color: #e9ecef;
        }
        
        .edit-sidebar-step.active {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }
        
        .edit-sidebar-icon {
            margin-right: 10px;
            font-size: 18px;
        }
        
        .edit-sidebar-text {
            font-size: 14px;
        }
        
        .competicao-info {
            font-size: 14px;
            font-weight: normal;
            margin-top: 5px;
            color: #666;
        }
    </style>
</head>
<body>
    @{
        bool edicao = ViewBag.Edicao != null && (bool)ViewBag.Edicao;
    }
    @if (TempData["Mensagem"] != null)
    {
        <div style="background: #d4edda; color: #155724; border: 1px solid #c3e6cb; padding: 10px; border-radius: 5px; margin: 15px auto; max-width: 700px; text-align: center;">
            @TempData["Mensagem"]
        </div>
    }
    @if (TempData["Erro"] != null)
    {
        <div style="background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; padding: 10px; border-radius: 5px; margin: 15px auto; max-width: 700px; text-align: center;">
            @TempData["Erro"]
        </div>
    }
    <script>
        var modoEdicao = @(edicao ? "true" : "false");
    </script>

    <!-- Logotipo -->
    <div class="top-left-logo">
        <a href="/">
            <img src="@Url.Content("~/img/logotipo.png")" alt="Logotipo" />
        </a>
    </div>

    <!-- Navega√ß√£o de Cria√ß√£o de Competi√ß√£o -->
    @if (!edicao)
    {
        @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Formato da Competi√ß√£o", edicao = false })
    }

    <!-- Menu lateral de edi√ß√£o (vis√≠vel apenas para administradores) -->
    @if (User.Identity.IsAuthenticated)
    {
        <div class="edit-sidebar" id="editSidebar" style="display: none;">
            <div class="edit-sidebar-title">
                Editar Competi√ß√£o
                <div class="competicao-info" id="competicaoNomeDisplay"></div>
            </div>
            <div class="edit-sidebar-steps">
                <a class="edit-sidebar-step" onclick="irParaEtapa('CriarCompeticao')">
                    <span class="edit-sidebar-icon">üìù</span>
                    <span class="edit-sidebar-text">Definir Competi√ß√£o</span>
                </a>
                <a class="edit-sidebar-step active">
                    <span class="edit-sidebar-icon">üèÜ</span>
                    <span class="edit-sidebar-text">Formato da Competi√ß√£o</span>
                </a>
                <a class="edit-sidebar-step" onclick="irParaEtapa('ListadeJogadores')">
                    <span class="edit-sidebar-icon">üë•</span>
                    <span class="edit-sidebar-text">Lista de Jogadores</span>
                </a>
                <a class="edit-sidebar-step" onclick="irParaEtapa('Emparelhamento')">
                    <span class="edit-sidebar-icon">üîÑ</span>
                    <span class="edit-sidebar-text">Emparelhamento</span>
                </a>
            </div>
        </div>
    }

    <!-- Conte√∫do -->
    <div class="main-container">
        <h2>Formato da Competi√ß√£o</h2>

        <div class="fase-selector">
            <label for="numFases">N√∫mero de Fases</label>
            <input type="number" id="numFases" name="numFases" min="1" max="5" value="@ViewBag.NumFases ?? 2" onchange="if(this.oldValue !== this.value) { this.oldValue = this.value; updateTableRows(); }" />
        </div>

        <table id="fasesTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Nome da Fase</th>
                    <th>Formato da Fase</th>
                    <th>Configura√ß√£o</th>
                </tr>
            </thead>
            <tbody id="fasesTableBody">
            </tbody>
        </table>

        <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 24px;">
            <button class="next-button" id="nextButton" @(edicao ? "disabled=\"disabled\"" : "")>Seguinte</button>
            @if (edicao)
            {
                <form asp-action="ConfirmarAlteracao" asp-controller="FormatodaCompeticao" method="post" style="display:inline;" id="formConfirmarAlteracao">
                    <button type="submit" class="next-button" id="btnConfirmarAlteracao">Confirmar Altera√ß√£o</button>
                </form>
            }
        </div>
    </div>

        <!-- Bot√£o Voltar -->   
        @if (edicao)
    {
        <a href="/Menu/Index" class="back-button" id="btnVoltar">&lt;Voltar</a>
    }
    else
    {
        <a href="/CriarCompeticao" class="back-button" id="btnVoltar">&lt;Voltar</a>
    }

    <script>
        // Recebe do Razor (TempData) ou do localStorage
        const competicaoId = '@ViewBag.CompeticaoId' || localStorage.getItem('competicaoId');
        const nomeCompeticao = '@ViewBag.NomeCompeticao' || localStorage.getItem('competicaoSelecionada');
        const tipoCompeticao = '@ViewBag.TipoCompeticao' || localStorage.getItem('tipoCompeticao');

        if (competicaoId) {
            localStorage.setItem('competicaoId', competicaoId);
        }
        if (nomeCompeticao) {
            localStorage.setItem('competicaoSelecionada', nomeCompeticao);
        }
        if (tipoCompeticao) {
            localStorage.setItem('tipoCompeticao', tipoCompeticao);
        }

        let formatosSelecionados = {};
        try {
            formatosSelecionados = @Html.Raw(ViewBag.FormatosSelecionados ?? "{}");
        } catch (e) { 
            // Tenta recuperar do localStorage se dispon√≠vel
            const savedFormatos = localStorage.getItem('formatosSelecionados');
            formatosSelecionados = savedFormatos ? JSON.parse(savedFormatos) : {};
        }

        function updateFormat(formato, faseNum) {
            formatosSelecionados[faseNum] = formato;
            
            // Salva no localStorage para persist√™ncia entre p√°ginas
            localStorage.setItem('formatosSelecionados', JSON.stringify(formatosSelecionados));
            
            // Salva no servidor via AJAX
            if (competicaoId) {
                fetch(`/FormatodaCompeticao/SalvarFormatos?competicaoId=${competicaoId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formatosSelecionados)
                });
            }
        }

        function configurarFase(faseNum) {
            const formato = formatosSelecionados[faseNum];
            if (!formato) {
                alert('Por favor, selecione um formato para a fase antes de configurar.');
                return;
            }

            if (!competicaoId) {
                alert('Erro: ID da competi√ß√£o n√£o encontrado. Por favor, recarregue a p√°gina e tente novamente.');
                return;
            }

            // Passa o modo de edi√ß√£o para a pr√≥xima p√°gina
            const modoEdicao = '@edicao' === 'True' || localStorage.getItem('modoEdicao') === 'true';
            let url = `@Url.Action("Index", "CriteriosdePontuacao")?faseNumero=${faseNum}&formato=${formato}&competicaoId=${competicaoId}&edicao=${modoEdicao}`;
            window.location.href = url;
        }

        function updateTableRows() {
            const numFases = parseInt(document.getElementById('numFases').value);
            const oldNumFases = localStorage.getItem('numFases');
            const tableBody = document.getElementById('fasesTableBody');
            
            // Verifica se a tabela est√° vazia (quando voltamos para a p√°gina)
            const isTableEmpty = tableBody.children.length === 0;
            
            // Verifica se houve altera√ß√£o no n√∫mero de fases
            if (!isTableEmpty && oldNumFases && parseInt(oldNumFases) === numFases && Object.keys(formatosSelecionados).length > 0) {
                // Se n√£o houve altera√ß√£o, a tabela n√£o est√° vazia e j√° temos formatos selecionados, n√£o recria a tabela
                return;
            }
            
            // Salva o n√∫mero de fases no localStorage
            localStorage.setItem('numFases', numFases);
            
            // Salva o n√∫mero de fases no servidor via AJAX se houver competicaoId
            if (competicaoId) {
                fetch(`/FormatodaCompeticao/SalvarNumFases?competicaoId=${competicaoId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(numFases)
                });
            }
            
            // Limpa a tabela para recri√°-la
            tableBody.innerHTML = '';

            for (let i = 1; i <= numFases; i++) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${i}</td>
                    <td>Fase ${i}</td>
                    <td>
                        <select onchange="updateFormat(this.value, ${i})" id="select-fase-${i}">
                            <option disabled${!formatosSelecionados[i] ? ' selected' : ''}>Formato</option>
                            <option value="round-robin"${formatosSelecionados[i] === 'round-robin' ? ' selected' : ''}>Round Robin (Todos contra todos)</option>
                            <option value="ave"${formatosSelecionados[i] === 'ave' ? ' selected' : ''}>Sistema AVE</option>
                            <option value="eliminacao"${formatosSelecionados[i] === 'eliminacao' ? ' selected' : ''}>Ta√ßa</option>
                            <option value="campeonato"${formatosSelecionados[i] === 'campeonato' ? ' selected' : ''}>Campeonato (Liga)</option>
                            <option value="duplo-ko"${formatosSelecionados[i] === 'duplo-ko' ? ' selected' : ''}>Duplo KO</option>
                        </select>
                    </td>
                    <td>
                        <button class="config-button" onclick="configurarFase(${i})">Configurar</button>
                        <span class="config-icon" onclick="configurarFase(${i})">‚öôÔ∏è</span>
                    </td>
                `;
                tableBody.appendChild(row);
            }
        }

        // Initialize table with default value e handler do bot√£o Seguinte
        document.addEventListener('DOMContentLoaded', function() {
            // Se existir valor vindo do servidor, usa-o, sen√£o tenta do localStorage
            const numFasesInput = document.getElementById('numFases');
            if (@ViewBag.NumFases != null) {
                numFasesInput.value = @ViewBag.NumFases;
            } else {
                const savedNumFases = localStorage.getItem('numFases');
                if (savedNumFases) {
                    numFasesInput.value = savedNumFases;
                }
            }
            // Inicializa o valor oldValue para compara√ß√£o futura
            numFasesInput.oldValue = numFasesInput.value;
            
            // For√ßar a cria√ß√£o da tabela no carregamento da p√°gina
            const tableBody = document.getElementById('fasesTableBody');
            tableBody.innerHTML = '';
            updateTableRows();

            // Handler do bot√£o Seguinte
            const nextButton = document.getElementById('nextButton');
            nextButton.addEventListener('click', function (e) {
                let numFases = parseInt(document.getElementById('numFases').value);
                // Descobre as fases configuradas
                let fasesConfiguradas = 0;
                let fasesComFormato = [];
                for (let i = 1; i <= numFases; i++) {
                    if (formatosSelecionados[i]) {
                        fasesConfiguradas++;
                        fasesComFormato.push({ fase: i, formato: formatosSelecionados[i] });
                    }
                }
                if (fasesConfiguradas < numFases) {
                    const continuar = confirm(`S√≥ configurou ${fasesConfiguradas} de ${numFases} fases. Deseja continuar apenas com as fases configuradas? (OK para continuar, Cancelar para configurar as restantes)`);
                    if (!continuar) {
                        // Fica na p√°gina para configurar as restantes
                        return;
                    }
                    // Remove fases n√£o configuradas e renumera as fases
                    const novoFormatosSelecionados = {};
                    for (let j = 0; j < fasesComFormato.length; j++) {
                        novoFormatosSelecionados[j + 1] = fasesComFormato[j].formato;
                    }
                    
                    // Atualiza o n√∫mero de fases para o n√∫mero de fases configuradas
                    numFasesInput.value = fasesComFormato.length;
                    
                    // Atualiza o objeto formatosSelecionados com os novos valores
                    formatosSelecionados = novoFormatosSelecionados;

                    // Atualiza no servidor (n√∫mero de fases e formatos)
                    Promise.all([
                        fetch(`/FormatodaCompeticao/SalvarNumFases?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(fasesComFormato.length)
                        }),
                        fetch(`/FormatodaCompeticao/SalvarFormatos?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formatosSelecionados)
                        })
                    ]).then(() => {
                        // For√ßa a recria√ß√£o da tabela com os novos valores
                        const tableBody = document.getElementById('fasesTableBody');
                        tableBody.innerHTML = '';
                        updateTableRows();
                        // N√£o avan√ßa ainda, espera o usu√°rio clicar novamente
                    });
                    return;
                }
                // Avan√ßa para a pr√≥xima p√°gina
                window.location.href = '@Url.Action("Index", "ListadeJogadores")';
            });

            // Atualiza o nome da competi√ß√£o no menu lateral
            const competicaoNomeDisplay = document.getElementById('competicaoNomeDisplay');
            if (competicaoNomeDisplay && nomeCompeticao) {
                competicaoNomeDisplay.textContent = `${nomeCompeticao} (${tipoCompeticao})`;
            }
            
            // Mostra o menu lateral se estiver em modo de edi√ß√£o
            const editSidebar = document.getElementById('editSidebar');
            if (editSidebar && @edicao.ToString().ToLower()) {
                editSidebar.style.display = 'block';
            }
        });

        // Handler do bot√£o Confirmar Altera√ß√£o (modo edi√ß√£o)
        const formConfirmarAlteracao = document.getElementById('formConfirmarAlteracao');
        if (formConfirmarAlteracao) {
            formConfirmarAlteracao.addEventListener('submit', function (e) {
                let numFases = parseInt(document.getElementById('numFases').value);
                let fasesConfiguradas = 0;
                let fasesComFormato = [];
                for (let i = 1; i <= numFases; i++) {
                    if (formatosSelecionados[i]) {
                        fasesConfiguradas++;
                        fasesComFormato.push({ fase: i, formato: formatosSelecionados[i] });
                    }
                }
                if (fasesConfiguradas < numFases) {
                    const continuar = confirm(`S√≥ configurou ${fasesConfiguradas} de ${numFases} fases. Deseja continuar apenas com as fases configuradas? (OK para continuar, Cancelar para configurar as restantes)`);
                    if (!continuar) {
                        e.preventDefault();
                        return;
                    }
                    // Remove fases n√£o configuradas e renumera as fases
                    const novoFormatosSelecionados = {};
                    for (let j = 0; j < fasesComFormato.length; j++) {
                        novoFormatosSelecionados[j + 1] = fasesComFormato[j].formato;
                    }
                    // Atualiza o n√∫mero de fases para o n√∫mero de fases configuradas
                    document.getElementById('numFases').value = fasesComFormato.length;
                    
                    // Atualiza o objeto formatosSelecionados com os novos valores
                    formatosSelecionados = novoFormatosSelecionados;

                    // Atualiza no servidor (n√∫mero de fases e formatos)
                    Promise.all([
                        fetch(`/FormatodaCompeticao/SalvarNumFases?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(fasesComFormato.length)
                        }),
                        fetch(`/FormatodaCompeticao/SalvarFormatos?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formatosSelecionados)
                        })
                    ]).then(() => {
                        // For√ßa a recria√ß√£o da tabela com os novos valores
                        const tableBody = document.getElementById('fasesTableBody');
                        tableBody.innerHTML = '';
                        updateTableRows();
                        // Agora N√ÉO submete automaticamente! O admin deve clicar novamente em Confirmar Altera√ß√£o.
                    });
                    e.preventDefault(); // Impede o submit original
                }
                // Caso contr√°rio, deixa submeter normalmente
            });
        }

        document.getElementById('btnVoltar').addEventListener('click', async function (e) {
            // Verificar se estamos em modo de edi√ß√£o
            const modoEdicao = '@edicao' === 'True' || localStorage.getItem('modoEdicao') === 'true';
            
            // Salvar o estado atual antes de navegar
            const numFases = parseInt(document.getElementById('numFases').value);
            
            // Salva o n√∫mero de fases no localStorage
            localStorage.setItem('numFases', numFases);
            
            // Salva o n√∫mero de fases e formatos no servidor via AJAX se houver competicaoId
            if (competicaoId) {
                try {
                    await Promise.all([
                        fetch(`/FormatodaCompeticao/SalvarNumFases?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(numFases)
                        }),
                        fetch(`/FormatodaCompeticao/SalvarFormatos?competicaoId=${competicaoId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formatosSelecionados)
                        })
                    ]);
                } catch (error) {
                    console.error('Erro ao salvar dados:', error);
                }
            }
            
            if (modoEdicao) {
                // Se estamos em modo de edi√ß√£o, n√£o eliminar a competi√ß√£o
                e.preventDefault();
                window.location.href = '/Menu/Index';
                return false;
            }
            
            // Elimina a competi√ß√£o criada se o utilizador sair antes de configurar
            const competicaoId = '@(ViewBag.CompeticaoId ?? "")';
            if (competicaoId) {
                await fetch('/Competicoes/EliminarCompeticao?id=' + encodeURIComponent(competicaoId), { method: 'POST' });
            }
        });
    </script>
</body>
</html>
