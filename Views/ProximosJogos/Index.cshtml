﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Jogos Agendados - Bilhar</title>
    <style>
        * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        }

        html, body {
        height: 100%;
        overflow: hidden;
        }

        body {
        font-family: Arial, sans-serif;
        background-color: #808080;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        position: relative;
        }

        .top-left-logo {
        position: absolute;
        top: 40px;
        left: 50px;
        }

        .top-left-logo img {
        width: 160px;
        }

        .main-container {
        margin-top: 80px;
        margin-bottom: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        flex-grow: 1;
        padding: 60px 20px;
        }

        .box {
        background-color: transparent;
        padding: 40px;
        border-radius: 12px;
        width: 100%;
        max-width: 820px;
        }

        h2 {
        font-size: 42px;
        margin-bottom: 40px;
        color: black;
        text-align: center;
        }

        .button-top-right {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
        }

        .btn {
        padding: 10px 22px;
        background-color: white;
        border: 2px solid black;
        border-radius: 10px;
        font-weight: bold;
        cursor: pointer;
        font-size: 18px;
        }

        .btn:hover {
        background-color: #dcdcdc;
        }

        .table-wrapper {
        max-height: 320px;
        overflow-y: auto;
        border: 1px solid #333;
        }

        table {
        width: 100%;
        border-collapse: collapse;
        }

        thead th {
        position: sticky; /* Mantém o cabeçalho fixo no topo */
        top: 0;
        background-color: #ddd;
        z-index: 1;
        }

        th, td {
        border: 1px solid #333;
        background-color: white;
        padding: 16px;
        font-size: 18px;
        text-align: center;
        }

        tr:nth-child(even) td {
        background-color: #f2f2f2; /* Alterna a cor das linhas */
        }

        .back-button {
        position: absolute;
        right: 40px;
        bottom: 40px;
        padding: 12px 24px;
        font-size: 18px;
        border: 2px solid #000;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        color: black;
        }

        .back-button:hover {
        background-color: #dcdcdc;
        }
    </style>
</head>
<body>

    <!-- Logotipo -->
    <div class="top-left-logo">
        <a href="/home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Conteúdo principal -->
    <div class="main-container">
        <div class="box">
            <h2>Jogos Agendados (Equipas e Individuais)</h2>

            <!-- Botão no topo à direita -->
            @if (User.Identity.IsAuthenticated)
            {
                <div class="button-top-right">
                    <button type="button" id="btnAdicionarEmparelhamentos" class="btn" style="display: none; margin-right: 10px;">
                        Adicionar Emparelhamentos
                    </button>
                    <button type="button" id="btnGerarRoundRobin" class="btn" style="display: none; margin-right: 10px;">
                        Gerar Próximos Jogos Round-Robin
                    </button>
                </div>
            }

            <!-- Tabela com scroll -->
            <div class="table-wrapper">
                <table id="tabelaJogos">
                    <thead>
                        <tr>
                            <th>Partidas (Equipas/Jogadores)</th>
                            <th>Data</th>
                            <th>Horário</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Jogos serão renderizados por JS -->
                    </tbody>
                </table>
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                <div style="text-align:center; margin-top:40px;">
                    <button class="btn" type="button" id="btnGuardarTodos">Guardar</button>
                </div>
            }

        </div>
    </div>

    <!-- Botão Voltar absoluto -->
    <a href="/Menu?competicaoId=@ViewBag.CompeticaoId" class="back-button">&lt;Voltar</a>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const competicaoId = @ViewBag.CompeticaoId;
        const competicaoNome = "@ViewBag.CompeticaoNome";
        const tabela = document.getElementById('tabelaJogos').getElementsByTagName('tbody')[0];
        const btnAdicionarEmparelhamentos = document.getElementById('btnAdicionarEmparelhamentos');
        const btnGerarRoundRobin = document.getElementById('btnGerarRoundRobin');
        
        // Atualizar o título
        document.querySelector('h2').textContent = `Jogos Agendados - ${competicaoNome}`;
        
        // Carregar jogos do servidor
        function carregarJogos() {
            // Mostrar mensagem de carregamento
            tabela.innerHTML = '<tr><td colspan="3">Carregando jogos...</td></tr>';
            
            fetch(`/ProximosJogos/ObterProximosJogos?competicaoId=${competicaoId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erro ao obter jogos');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.mensagem) {
                        // Se recebemos uma mensagem específica do servidor
                        console.log(data.mensagem);
                        tabela.innerHTML = `<tr><td colspan="3">${data.mensagem}</td></tr>`;
                    } else {
                        // Verificar se é uma competição do tipo taça e se todos os jogos têm vencedor
                        if (data.isTaca && data.todosJogosRealizados && btnAdicionarEmparelhamentos) {
                            btnAdicionarEmparelhamentos.style.display = 'block';
                            btnAdicionarEmparelhamentos.onclick = () => {
                                // Redirecionar para a página de emparelhamento
                                window.location.href = `/Emparelhamento?competicaoId=${competicaoId}&fase=proxima`;
                            };
                        }

                        // Verificar se é um formato Round-Robin
                        if (data.isRoundRobin && btnGerarRoundRobin) {
                            btnGerarRoundRobin.style.display = 'block';
                            btnGerarRoundRobin.onclick = async () => {
                                try {
                                    // Primeiro, obter os jogos já realizados
                                    const response = await fetch(`/Emparelhamento/ObterEmparelhamentos?competicaoId=${competicaoId}`);
                                    const jogosExistentes = await response.json();
                                    
                                    // Preparar os dados para gerar novos emparelhamentos
                                    const requestData = {
                                        competicaoId: competicaoId,
                                        nomeCompeticao: competicaoNome,
                                        emparelhamentos: jogosExistentes.map(jogo => ({
                                            clube1: jogo.clube1,
                                            clube2: jogo.clube2,
                                            dataJogo: jogo.dataJogo,
                                            horaJogo: jogo.horaJogo,
                                            pontuacaoClube1: jogo.pontuacaoClube1,
                                            pontuacaoClube2: jogo.pontuacaoClube2,
                                            jogoRealizado: jogo.jogoRealizado
                                        }))
                                    };

                                    const saveResponse = await fetch('/Emparelhamento/SalvarEmparelhamentos', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(requestData)
                                    });

                                    const result = await saveResponse.json();
                                    
                                    if (saveResponse.ok) {
                                        alert(result.mensagem);
                                        carregarJogos(); // Recarregar a lista de jogos
                                    } else {
                                        alert(result.mensagem || 'Erro ao gerar novos emparelhamentos');
                                    }
                                } catch (error) {
                                    console.error('Erro:', error);
                                    alert('Erro ao gerar novos emparelhamentos');
                                }
                            };
                        }

                        renderJogos(data.jogosPorData);
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                    tabela.innerHTML = `<tr><td colspan="3">Erro ao carregar jogos: ${error.message}</td></tr>`;
                });
        }
        
        function renderJogos(dados) {
            tabela.innerHTML = '';
            
            if (!dados || dados.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="3">Nenhum jogo agendado.</td>';
                tabela.appendChild(row);
                return;
            }
            
            // Para cada data, criar um cabeçalho e listar os jogos
            dados.forEach(grupo => {
                // Adicionar cabeçalho da data
                const headerRow = document.createElement('tr');
                headerRow.innerHTML = `<td colspan="3" style="background-color: #e0e0e0; font-weight: bold;">${grupo.dataFormatada}</td>`;
                tabela.appendChild(headerRow);
                
                // Adicionar jogos da data
                grupo.jogos.forEach(jogo => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${jogo.clube1} vs ${jogo.clube2}</td>
                        <td>
                            <input type="date" class="edit-date" data-jogo-id="${jogo.id}" value="${grupo.data}" style="padding: 5px; width: 140px;">
                        </td>
                        <td>
                            <input type="time" class="edit-time" data-jogo-id="${jogo.id}" value="${jogo.horario}" style="padding: 5px; width: 100px;">
                        </td>
                    `;
                    tabela.appendChild(row);
                });
            });
        }
        
        // Guardar alterações (para usuários autenticados)
        var btnGuardarTodos = document.getElementById('btnGuardarTodos');
        if (btnGuardarTodos) {
            btnGuardarTodos.addEventListener('click', function() {
                // Coletar todas as alterações
                const alteracoes = [];
                const datas = document.querySelectorAll('.edit-date');
                const horas = document.querySelectorAll('.edit-time');
                
                for (let i = 0; i < datas.length; i++) {
                    const jogoId = datas[i].getAttribute('data-jogo-id');
                    const novaData = datas[i].value;
                    const novaHora = horas[i].value;
                    
                    if (jogoId && novaData && novaHora) {
                        alteracoes.push({
                            id: jogoId,
                            data: novaData,
                            hora: novaHora
                        });
                    }
                }
                
                if (alteracoes.length > 0) {
                    // Enviar alterações para o servidor
                    fetch('/ProximosJogos/AtualizarDatasHoras', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(alteracoes)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erro ao salvar alterações');
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('Alterações salvas com sucesso!');
                        // Recarregar os jogos
                        carregarJogos();
                    })
                    .catch(error => {
                        console.error('Erro:', error);
                        alert('Erro ao salvar alterações: ' + error.message);
                    });
                } else {
                    alert('Nenhuma alteração para salvar.');
                }
            });
        }
        

        
        // Inicializar
        carregarJogos();
    });
</script>

</body>
</html>
