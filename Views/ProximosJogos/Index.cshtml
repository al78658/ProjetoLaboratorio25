@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Jogos Agendados - Bilhar</title>
    <style>
        * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        }

        html, body {
        height: 100%;
        overflow: hidden;
        }

        body {
        font-family: Arial, sans-serif;
        background-color: #808080;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        position: relative;
        }

        .top-left-logo {
        position: absolute;
        top: 40px;
        left: 50px;
        }

        .top-left-logo img {
        width: 160px;
        }

        .main-container {
        margin-top: 80px;
        margin-bottom: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        flex-grow: 1;
        padding: 60px 20px;
        }

        .box {
        background-color: transparent;
        padding: 40px;
        border-radius: 12px;
        width: 100%;
        max-width: 820px;
        }

        h2 {
        font-size: 42px;
        margin-bottom: 40px;
        color: black;
        text-align: center;
        }

        .button-top-right {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
        }

        .btn {
        padding: 10px 22px;
        background-color: white;
        border: 2px solid black;
        border-radius: 10px;
        font-weight: bold;
        cursor: pointer;
        font-size: 18px;
        }

        .btn:hover {
        background-color: #dcdcdc;
        }

        .table-wrapper {
        max-height: 320px;
        overflow-y: auto;
        border: 1px solid #333;
        }

        table {
        width: 100%;
        border-collapse: collapse;
        }

        thead th {
        position: sticky; /* Mantém o cabeçalho fixo no topo */
        top: 0;
        background-color: #ddd;
        z-index: 1;
        }

        th, td {
        border: 1px solid #333;
        background-color: white;
        padding: 16px;
        font-size: 18px;
        text-align: center;
        }

        tr:nth-child(even) td {
        background-color: #f2f2f2; /* Alterna a cor das linhas */
        }

        .back-button {
        position: absolute;
        right: 40px;
        bottom: 40px;
        padding: 12px 24px;
        font-size: 18px;
        border: 2px solid #000;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        color: black;
        }

        .back-button:hover {
        background-color: #dcdcdc;
        }
    </style>
</head>
<body>

    <!-- Logotipo -->
    <div class="top-left-logo">
        <a href="/home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Conteúdo principal -->
    <div class="main-container">
        <div class="box">
            <h2>Jogos Agendados (Equipas e Individuais)</h2>

            <!-- Botão no topo à direita -->
            @if (User.Identity.IsAuthenticated)
            {
                <div class="button-top-right">
                    <button type="button" id="btnAdicionarEmparelhamentos" class="btn" style="display: none; margin-right: 10px;">
                        Adicionar Emparelhamentos
                    </button>
                    <button type="button" id="btnGerarRoundRobin" class="btn" style="display: none; margin-right: 10px;">
                        Gerar Próximos Jogos Round-Robin
                    </button>
                    <button type="button" id="btnGerarCampeonato" class="btn" style="display: none; margin-right: 10px;">
                        Gerar Próximos Jogos de Campeonato
                    </button>
                    <button type="button" id="btnGerarSistemaAve" class="btn" style="display: none; margin-right: 10px;">
                        Gerar Próximos Jogo Sistema AVE
                    </button>
                    <button type="button" id="btnNovosEmparelhamentosDuploKO" class="btn" style="display: none; margin-right: 10px;">
                        Novos Emparelhamentos Duplo KO
                    </button>
                    <button type="button" id="btnGerarProximaFaseTaca" class="btn" style="display: none; margin-right: 10px;">
                        Gerar Próxima Fase da Taça
                    </button>
                </div>
            }

            <!-- Tabela com scroll -->
            <div class="table-wrapper">
                <table id="tabelaJogos">
                    <thead>
                        <tr>
                            <th>Partidas (Equipas/Jogadores)</th>
                            <th>Data</th>
                            <th>Horário</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Jogos serão renderizados por JS -->
                    </tbody>
                </table>
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                <div style="text-align:center; margin-top:40px;">
                    <button class="btn" type="button" id="btnGuardarTodos">Guardar</button>
                </div>
            }

        </div>
    </div>

    <!-- Botão Voltar absoluto -->
    <a href="/Menu?competicaoId=@ViewBag.CompeticaoId" class="back-button">&lt;Voltar</a>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const competicaoId = @ViewBag.CompeticaoId;
        const competicaoNome = "@ViewBag.CompeticaoNome";
        const tabela = document.getElementById('tabelaJogos').getElementsByTagName('tbody')[0];
        const btnAdicionarEmparelhamentos = document.getElementById('btnAdicionarEmparelhamentos');
        const btnGerarRoundRobin = document.getElementById('btnGerarRoundRobin');
		const btnGerarCampeonato = document.getElementById('btnGerarCampeonato');
		const btnGerarSistemaAve = document.getElementById('btnGerarSistemaAve');
        const btnNovosEmparelhamentosDuploKO = document.getElementById('btnNovosEmparelhamentosDuploKO');
        const btnGerarProximaFaseTaca = document.getElementById('btnGerarProximaFaseTaca');
        
        // Atualizar o título
        document.querySelector('h2').textContent = `Jogos Agendados - ${competicaoNome}`;
        
        function carregarJogos() {
            // Mostrar mensagem de carregamento
            tabela.innerHTML = '<tr><td colspan="3">Carregando jogos...</td></tr>';
            
            fetch(`/ProximosJogos/ObterProximosJogos?competicaoId=${competicaoId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erro ao obter jogos');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.mensagem) {
                        // Se recebemos uma mensagem específica do servidor
                        console.log(data.mensagem);
                        tabela.innerHTML = `<tr><td colspan="3">${data.mensagem}</td></tr>`;
                    }

                    // Renderizar os jogos primeiro
                    renderJogos(data.jogosPorData);
                    
                    // Verificar se é um formato Duplo KO e se todos os jogos têm vencedor
                    if (data.isDuploKO && btnNovosEmparelhamentosDuploKO) {
                        // Esconder o botão por padrão
                        btnNovosEmparelhamentosDuploKO.style.display = 'none';
                        
                        // Buscar os dados completos dos jogos
                        fetch(`/Emparelhamento/ObterEmparelhamentos?competicaoId=${competicaoId}`)
                            .then(response => response.json())
                            .then(jogosCompletos => {
                                console.log('Jogos completos:', jogosCompletos);
                                
                                // Verificar se algum jogo tem o motivo Losers Bracket
                                const temJogoComMotivoLosersBracket = jogosCompletos.some(jogo => {
                                    // Verificar o motivo de diferentes maneiras
                                    const motivo = jogo.motivo || jogo.Motivo || '';
                                    const temMotivo = motivo.includes('Losers Bracket') || 
                                                    motivo.includes('losers bracket') || 
                                                    motivo.includes('Losers') ||
                                                    motivo.includes('losers');
                                    
                                    console.log('Jogo:', jogo.id, {
                                        motivo: motivo,
                                        motivoOriginal: jogo.motivo,
                                        motivoAlternativo: jogo.Motivo,
                                        temMotivo: temMotivo,
                                        jogoCompleto: jogo
                                    });
                                    
                                    return temMotivo;
                                });

                                console.log('Tem jogo com motivo Losers Bracket:', temJogoComMotivoLosersBracket);

                                if (temJogoComMotivoLosersBracket) {
                                    console.log('Existe jogo com motivo Losers Bracket - mostrando botão');
                                    btnNovosEmparelhamentosDuploKO.style.display = 'block';
                                    btnNovosEmparelhamentosDuploKO.onclick = function() {
                                        // Primeiro, buscar o jogo que está em espera
                                        fetch(`/Emparelhamento/ObterEmparelhamentos?competicaoId=${competicaoId}`)
                                            .then(response => response.json())
                                            .then(jogosAntes => {
                                                const jogoEmEspera = jogosAntes.find(j => j.motivo === "Aguardando resolução do Losers Bracket");
                                                console.log('Jogo em espera:', jogoEmEspera);

                                                if (!jogoEmEspera) {
                                                    console.log('Não encontrou jogo em espera');
                                                    return;
                                                }

                                                // Gerar novos emparelhamentos
                                                fetch('/Emparelhamento/GerarEmparelhamentosDuploKO', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                                    body: JSON.stringify({
                                                        competicaoId: competicaoId,
                                                        nomeCompeticao: competicaoNome,
                                                        excluirJogoId: jogoEmEspera.id
                                                    })
                                                })
                                                .then(response => response.json())
                                                .then(data => {
                                                    console.log('Resposta do emparelhamento:', data);
                                                    location.reload();
                                                })
                                                .catch(error => {
                                                    console.error('Erro ao gerar emparelhamentos:', error);
                                                    alert('Erro ao gerar novos emparelhamentos.');
                                                });
                                            })
                                            .catch(error => {
                                                console.error('Erro ao buscar jogos:', error);
                                                alert('Erro ao buscar jogos.');
                                            });
                                    };
                                    return;
                                }
                                
                                // Se não houver jogos com motivo Losers Bracket, verificar pontuações
                                console.log('Nenhum jogo tem motivo Losers Bracket - verificando pontuações');
                                const todosJogosTemPontuacao = jogosCompletos.every(jogo => {
                                    const temPontuacoes = jogo.jogoRealizado && 
                                        jogo.pontuacaoClube1 !== null && 
                                        jogo.pontuacaoClube2 !== null;
                                    console.log('Jogo:', jogo.id, 'Tem pontuações:', temPontuacoes);
                                    return temPontuacoes;
                                });

                                console.log('Todos jogos têm pontuações:', todosJogosTemPontuacao);
                                
                                if (todosJogosTemPontuacao) {
                                    btnNovosEmparelhamentosDuploKO.style.display = 'block';
                                    btnNovosEmparelhamentosDuploKO.onclick = function() {
                                        fetch(`/Emparelhamento/ObterEmparelhamentos?competicaoId=${competicaoId}`)
                                            .then(response => response.json())
                                            .then(jogosExistentes => {
                                        const requestData = {
                                            competicaoId: competicaoId,
                                            nomeCompeticao: competicaoNome,
                                            emparelhamentos: jogosExistentes.map(jogo => ({
                                                clube1: jogo.clube1,
                                                clube2: jogo.clube2,
                                                dataJogo: jogo.dataJogo,
                                                horaJogo: jogo.horaJogo,
                                                pontuacaoClube1: jogo.pontuacaoClube1,
                                                pontuacaoClube2: jogo.pontuacaoClube2,
                                                jogoRealizado: jogo.jogoRealizado,
                                                bracket: jogo.bracket,
                                                rondaBracket: jogo.rondaBracket
                                            }))
                                        };

                                            return fetch('/Emparelhamento/GerarEmparelhamentosDuploKO', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify(requestData)
                                        });
                                            })
                                            .then(response => response.json())
                                            .then(result => {
                                            alert(result.mensagem);
                                                carregarJogos();
                                            })
                                            .catch(error => {
                                        console.error('Erro:', error);
                                        alert('Erro ao gerar novos emparelhamentos');
                                            });
                                };
                            }
                            })
                            .catch(error => {
                                    console.error('Erro:', error);
                                alert('Erro ao obter jogos completos');
                            });
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                    tabela.innerHTML = `<tr><td colspan="3">Erro ao carregar jogos: ${error.message}</td></tr>`;
                });
        }
        
        function renderJogos(dados) {
            tabela.innerHTML = '';
            
            if (!dados || dados.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="3">Nenhum jogo agendado.</td>';
                tabela.appendChild(row);
                return;
            }
            
            // Para cada data, criar um cabeçalho e listar os jogos
            dados.forEach(grupo => {
                // Adicionar cabeçalho da data
                const headerRow = document.createElement('tr');
                const headerText = grupo.data === "0001-01-01" ? "Jogos por Agendar" : grupo.dataFormatada;
                headerRow.innerHTML = `<td colspan="3" style="background-color: #e0e0e0; font-weight: bold;">${headerText}</td>`;
                tabela.appendChild(headerRow);
                
                // Adicionar jogos da data
                grupo.jogos.forEach(jogo => {
                    const row = document.createElement('tr');
                    const dataValue = grupo.data === "0001-01-01" ? "" : grupo.data;
                    const horaValue = jogo.horario === "00:00" ? "" : jogo.horario;
                    
                    row.innerHTML = `
                        <td>${jogo.clube1} vs ${jogo.clube2}</td>
                        <td>
                            <input type="date" class="edit-date" data-jogo-id="${jogo.id}" value="${dataValue}" style="padding: 5px; width: 140px;">
                        </td>
                        <td>
                            <input type="time" class="edit-time" data-jogo-id="${jogo.id}" value="${horaValue}" style="padding: 5px; width: 100px;">
                        </td>
                    `;
                    tabela.appendChild(row);
                });
            });
        }
        
        // Guardar alterações (para usuários autenticados)
        var btnGuardarTodos = document.getElementById('btnGuardarTodos');
        if (btnGuardarTodos) {
            btnGuardarTodos.addEventListener('click', function() {
                // Coletar todas as alterações
                const alteracoes = [];
                const datas = document.querySelectorAll('.edit-date');
                const horas = document.querySelectorAll('.edit-time');
                
                for (let i = 0; i < datas.length; i++) {
                    const jogoId = datas[i].getAttribute('data-jogo-id');
                    const novaData = datas[i].value;
                    const novaHora = horas[i].value;
                    
                    if (jogoId && novaData && novaHora) {
                        alteracoes.push({
                            id: jogoId,
                            data: novaData,
                            hora: novaHora
                        });
                    }
                }
                
                if (alteracoes.length > 0) {
                    // Enviar alterações para o servidor
                    fetch('/ProximosJogos/AtualizarDatasHoras', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(alteracoes)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erro ao salvar alterações');
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('Alterações salvas com sucesso!');
                        // Recarregar os jogos
                        carregarJogos();
                    })
                    .catch(error => {
                        console.error('Erro:', error);
                        alert('Erro ao salvar alterações: ' + error.message);
                    });
                } else {
                    alert('Nenhuma alteração para salvar.');
                }
            });
        }
        
        // Mostrar o botão apropriado baseado no formato da competição
        fetch(`/Emparelhamento/VerificarEmparelhamentos?competicaoId=${competicaoId}`)
            .then(response => response.json())
            .then(data => {
                if (data.formato === 'round-robin') {
                    btnGerarRoundRobin.style.display = 'inline-block';
                } else if (data.formato === 'campeonato') {
                    btnGerarCampeonato.style.display = 'inline-block';
                } else if (data.formato === 'ave') {
                    btnGerarSistemaAve.style.display = 'inline-block';
                } else if (data.formato === 'eliminacao') {
                    btnAdicionarEmparelhamentos.style.display = 'inline-block';
                }
            });

        // Handler para o botão de gerar próximos jogos Round-Robin
        if (btnGerarRoundRobin) {
            btnGerarRoundRobin.addEventListener('click', async function() {
                try {
                    const response = await fetch('/Emparelhamento/GerarEmparelhamentosRoundRobin', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            competicaoId: competicaoId
                        })
                    });

                    const result = await response.json();
                    
                    if (response.ok) {
                        alert(result.mensagem);
                        carregarJogos(); // Recarregar a lista de jogos
                    } else {
                        alert(result.mensagem || 'Erro ao gerar novos emparelhamentos');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao gerar novos emparelhamentos');
                }
            });
        }

        // Handler para o botão de gerar próximos jogos Campeonato
        if (btnGerarCampeonato) {
            btnGerarCampeonato.addEventListener('click', async function() {
                try {
                    const response = await fetch('/Emparelhamento/GerarEmparelhamentosCampeonato', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            competicaoId: competicaoId
                        })
                    });

                    const result = await response.json();
                    
                    if (response.ok) {
                        alert(result.mensagem);
                        carregarJogos(); // Recarregar a lista de jogos
                    } else {
                        alert(result.mensagem || 'Erro ao gerar novos emparelhamentos');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao gerar novos emparelhamentos');
                }
            });
        }

        // Handler para o botão de gerar próximos jogos Sistema AVE
        if (btnGerarSistemaAve) {
            btnGerarSistemaAve.addEventListener('click', async function() {
                try {
                    const response = await fetch(`/ProximosJogos/GerarSistemaAve?competicaoId=${competicaoId}`, {
                        method: 'GET'
                    });

                    const result = await response.json();
                    
                    if (response.ok) {
                        alert(result.mensagem);
                        carregarJogos(); // Recarregar a lista de jogos
                    } else {
                        alert(result.mensagem || 'Erro ao gerar novos emparelhamentos');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao gerar novos emparelhamentos');
                }
            });
        }

        // Handler para o botão de adicionar emparelhamentos (Taça)
        if (btnAdicionarEmparelhamentos) {
            btnAdicionarEmparelhamentos.addEventListener('click', function() {
                window.location.href = `/Emparelhamento?competicaoId=${competicaoId}&fase=proxima`;
            });
        }

        // Inicializar
        carregarJogos();
    });

    function setupWaitingMatches() {
        const waitingMatches = document.querySelectorAll('tr[data-motivo="Aguardando resolução do Losers Bracket"]');
        waitingMatches.forEach(match => {
            const emparelhamentoId = match.getAttribute('data-emparelhamento-id');
            
            // Desabilitar campos de pontuação
            const pontuacaoInputs = [
                document.getElementById(`pontuacaoClube1_${emparelhamentoId}`),
                document.getElementById(`pontuacaoClube2_${emparelhamentoId}`)
            ];
            
            pontuacaoInputs.forEach(input => {
                if (input) {
                    input.disabled = true;
                    input.value = '0';
                    input.style.backgroundColor = '#f0f0f0';
                }
            });

            // Marcar o jogo como realizado e desabilitar o checkbox
            const jogoRealizadoInput = document.getElementById(`jogoRealizado_${emparelhamentoId}`);
            if (jogoRealizadoInput) {
                jogoRealizadoInput.checked = true;
                jogoRealizadoInput.disabled = true;
            }

            // Desabilitar o botão de atualizar pontuação
            const updateButton = document.getElementById(`updateButton_${emparelhamentoId}`);
            if (updateButton) {
                updateButton.disabled = true;
                updateButton.style.backgroundColor = '#f0f0f0';
                updateButton.style.cursor = 'not-allowed';
            }

            // Adicionar indicador visual de que o jogo está em espera
            const statusCell = match.querySelector('td:last-child');
            if (statusCell) {
                statusCell.innerHTML += '<br><span style="color: #666; font-style: italic;">(Aguardando resolução do Losers Bracket)</span>';
            }
        });
    }

    function atualizarPontuacao(emparelhamentoId) {
        const pontuacaoClube1 = document.getElementById(`pontuacaoClube1_${emparelhamentoId}`).value;
        const pontuacaoClube2 = document.getElementById(`pontuacaoClube2_${emparelhamentoId}`).value;
        const motivo = document.getElementById(`motivo_${emparelhamentoId}`).value;

        // Verificar se é um empate
        if (pontuacaoClube1 === pontuacaoClube2) {
            alert('Não é possível registrar empate neste jogo.');
            return;
        }

        fetch('/ProximosJogos/AtualizarPontuacao', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                emparelhamentoId: emparelhamentoId,
                pontuacaoClube1: parseInt(pontuacaoClube1),
                pontuacaoClube2: parseInt(pontuacaoClube2),
                motivo: motivo
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.mensagem) {
                alert(data.mensagem);
                if (data.mensagem.includes('sucesso')) {
                    location.reload();
                }
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao atualizar pontuações.');
        });
    }

    // Chamar a função quando a página carregar
    document.addEventListener('DOMContentLoaded', function() {
        setupWaitingMatches();
    });
</script>
</body>
</html>