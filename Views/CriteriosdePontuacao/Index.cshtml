@{
    Layout = null;
    var configuracao = ViewBag.Configuracao as ProjetoLaboratorio25.Models.ConfiguracaoFase;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Configurar Competição</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            position: relative;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        .main-container {
            padding-top: 140px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 1000px;
            margin: auto;
        }

        h2 {
            font-size: 32px;
            margin-bottom: 32px;
            color: black;
            text-align: center;
        }

        form {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 20px;
            width: 100%;
            max-width: 900px;
            margin-bottom: 20px;
        }

        .form-section {
            flex: 1;
            min-width: 250px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        label {
            font-size: 18px;
            color: black;
            margin-bottom: 6px;
        }

        input[type="text"],
        input[type="number"],
        select {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #444;
        }

        .checkbox-list {
            background: white;
            border: 1px solid #333;
            border-radius: 6px;
            padding: 15px;
            width: 100%;
            max-height: none;
            overflow: visible;
            display: flex;
            flex-direction: row;
            gap: 30px;
        }

        .checkbox-column {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .checkbox-list label {
            display: block;
            margin-bottom: 12px;
            font-size: 16px;
            padding: 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .checkbox-list label:hover {
            background-color: #f5f5f5;
        }

        .checkbox-list input[type="checkbox"] {
            margin-right: 10px;
        }

        .checkbox-list strong {
            color: #333;
        }

        .checkbox-list span {
            display: block;
            margin-top: 4px;
        }

        .save-button {
            font-size: 18px;
            padding: 14px 32px;
            border: 2px solid black;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }

            .save-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        .formato-display {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #444;
            background-color: #f5f5f5;
            color: #333;
        }

            .formato-display span {
                font-weight: bold;
            }

        @@media (max-width: 768px) {
            h2

        {
            font-size: 24px;
        }

        .form-row {
            flex-direction: column;
            align-items: stretch;
        }

        .save-button {
            width: 100%;
        }

        }</style>
</head>
<body>
    <!-- Logotipo -->
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Conteúdo -->
    <div class="main-container">
        <h2>Configurar Fase @ViewBag.FaseNumero</h2>


        <form method="post">
            <input type="hidden" name="edicao" value="@(ViewBag.Edicao != null && (bool)ViewBag.Edicao ? "true" : "false")" />
            <input type="hidden" name="faseNumero" value="@ViewBag.FaseNumero" />
            <input type="hidden" name="formato" value="@ViewBag.FormatoSelecionado" />
            <input type="hidden" name="competicaoId" value="@ViewBag.CompeticaoId" />
            @{
            var formatos = new Dictionary<string, string>
            {
                { "round-robin", "Round Robin (Todos contra todos)" },
                { "ave", "Sistema AVE" },
                { "eliminacao", "Taça" },
                { "campeonato", "Campeonato (Liga)" },
                { "duplo-ko", "Duplo KO" }
            };

                var formatoSelecionado = ViewBag.FormatoSelecionado as string;
                var nomeFormato = formatos.ContainsKey(formatoSelecionado) ? formatos[formatoSelecionado] : formatoSelecionado;
            }


            <div class="form-row">
                <div class="form-section">
                    <label for="formato">Formato:</label>
                    <div class="formato-display">
                        <span>@nomeFormato</span>
                    </div>
                </div>
                

            @{
                var tipoCompeticao = (ViewBag.TipoCompeticao as string ?? "Individual").ToLower();
                string labelApuramento;
                if (formatoSelecionado == "eliminacao")
                {
                    labelApuramento = tipoCompeticao == "equipas" ? "Quantas equipas se apuram para a próxima fase?" : "Quantos jogadores se apuram para a próxima fase?";
                }
                else if (tipoCompeticao == "individual")
                {
                    labelApuramento = "Quantos jogadores se apuram?";
                }
                else if (tipoCompeticao == "equipas")
                {
                    labelApuramento = "Quantas equipas se apuram?";
                }
                else
                {
                    labelApuramento = "Quantos se apuram?";
                }
            }


            @if (formatoSelecionado == "eliminacao")
            {
                <div class="form-section">
                    <label for="num-apurados">@labelApuramento</label>
                    <input type="number" name="numApurados" id="num-apurados" min="1" value="2" required />
                </div>
                <div class="form-section sorteio-section">
                    <label style="font-size: 20px; font-weight: bold; margin-bottom: 10px;">Configuração do Sorteio</label>
                    <div class="sorteio-opcoes">
                        <label class="radio-opcao">
                            <input type="radio" name="tipoSorteio" value="todos" checked />
                            <span>Definir todos os emparelhamentos no início</span>
                        </label>
                        <br/>
                        <label class="radio-opcao">
                            <input type="radio" name="tipoSorteio" value="ronda" />
                            <span>Realizar sorteio antes de cada ronda</span>
                        </label>
                    </div>
                </div>
            }
            </div>


            @if (formatoSelecionado == "campeonato" || formatoSelecionado == "round-robin" || formatoSelecionado == "duplo-ko")
            {
                <div class="form-row">
                    <div class="form-section"> 
                        <label for="vitoria">Pontos por Vitória:</label>
                        <input type="number" id="vitoria" name="vitoria" min="0" value="@(configuracao?.PontosVitoria ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="empate">Pontos por Empate:</label>
                        <input type="number" id="empate" name="empate" min="0" value="@(configuracao?.PontosEmpate ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="derrota">Pontos por Derrota:</label>
                        <input type="number" id="derrota" name="derrota" min="0" value="@(configuracao?.PontosDerrota ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="faltaComparencia">Pontos por Falta de Comparência:</label>
                        <input type="number" id="faltaComparencia" name="faltaComparencia" min="0" value="@(configuracao?.PontosFaltaComparencia ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="desclassificacao">Pontos por Desclassificação:</label>
                        <input type="number" id="desclassificacao" name="desclassificacao" min="0" value="@(configuracao?.PontosDesclassificacao ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="pontosExtra">Pontos Extra:</label>
                        <input type="number" id="pontosExtra" name="pontosExtra" min="0" value="@(configuracao?.PontosExtra ?? 0)" required />
                    </div>
                </div>
            }
            else if (formatoSelecionado != "eliminacao")
            {
                <div class="form-row">
                    <div class="form-section">
                        <label for="vitoria">Pontos por Vitória:</label>
                        <input type="number" id="vitoria" name="vitoria" min="0" value="@(configuracao?.PontosVitoria ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="empate">Pontos por Empate:</label>
                        <input type="number" id="empate" name="empate" min="0" value="@(configuracao?.PontosEmpate ?? 0)" required />
                    </div>
                    <div class="form-section">
                        <label for="derrota">Pontos por Derrota:</label>
                        <input type="number" id="derrota" name="derrota" min="0" value="@(configuracao?.PontosDerrota ?? 0)" required />
                    </div>
                </div>
            }

            <div class="form-row">
                <div class="form-section" style="flex: 2;">
                    <label style="font-size: 20px; font-weight: bold; margin-bottom: 15px;">Critérios de Desempate / Avaliação</label>
                    <div id="criteriosList" class="checkbox-list">
                        <!-- Preenchido via JavaScript -->
                    </div>
                </div>
            </div>

            <div class="form-row" style="justify-content: center;">
                <button type="submit" class="save-button">Guardar Configuração</button>
            </div>
        </form>
    </div>

    <!-- Botão Voltar -->
    @if (ViewBag.Edicao != null && (bool)ViewBag.Edicao)
    {
        <a href="/FormatodaCompeticao?edicao=true" class="back-button">&lt;Voltar</a>
    }
    else
    {
        <a href="/FormatodaCompeticao" class="back-button">&lt;Voltar</a>
    }
    <script>
        const formatosConfig = {
            'round-robin': {
                description: 'Neste sistema, cada jogador ou equipa defronta todos os outros. É comum em fases de grupos.',
                defaultPoints: { vitoria: 3, empate: 1, derrota: 0 },
                criterios: [
                    { id: 'diferenca-frames', label: 'Diferença de frames/partidas' },
                    { id: 'confronto', label: 'Confronto direto' },
                    { id: 'frames-ganhos', label: 'Maior número de frames/partidas ganhas' },
                    { id: 'media-tacadas', label: 'Média de tacadas' }
                ]
            },
            'ave': {
                description: 'Sistema AVE (Average Victory Efficiency) - Sistema baseado em performance média, muito usado para ordenar jogadores com base em performance média (geralmente em Carambola).',
                defaultPoints: { vitoria: 3, empate: 1, derrota: 0 },
                criterios: [
                    { 
                        id: 'media-ave', 
                        label: 'Ponderação por média AVE (Average por entrada)',
                        description: 'Usa a média de pontos por jogada/entrada como fator determinante de desempenho.' 
                    },
                    { 
                        id: 'ranking-media', 
                        label: 'Ranking por média AVE',
                        description: 'Atribui pontuação adicional consoante a média alcançada: Exemplo: 1.º lugar = 5 pts | 2.º = 4 pts | 3.º = 3 pts...' 
                    },
                    { 
                        id: 'round-robin-ave', 
                        label: 'Pontuação estilo Round Robin com média como desempate (3-1-0)',
                        description: 'Sistema tradicional de pontos com média usada apenas em caso de empate.' 
                    }
                ]
            },
            'eliminacao': {
                description: 'Este sistema também é conhecido como sistema de Taça. Os atletas/equipas emparelham 2 a 2. O vencedor segue em frente e o perdedor fica eliminado. Não há pontuação. Quem se apura, continua em prova em igualdade com todos os demais.\n\nNa primeira ronda podem estar presentes só algumas equipas/jogadores, enquanto outras ficam isentas (fase preliminar). Após o primeiro sorteio, pode optar por definir todos os emparelhamentos até à última ronda, ou realizar sorteios independentes antes de cada ronda.',
                defaultPoints: { vitoria: 0, empate: 0, derrota: 0 },
                criterios: [] // Não há critérios de desempate para Taça
            },
            'campeonato': {
                description: 'Competição prolongada por vários encontros ao longo de uma época.',
                defaultPoints: { vitoria: 3, empate: 1, derrota: 0 },
                criterios: [
                    { id: 'diferenca-partidas', label: 'Diferença de partidas/frames' },
                    { id: 'confronto', label: 'Confronto direto' },
                    { id: 'fair-play', label: 'Fair play' },
                    { id: 'media-pontuacao', label: 'Média de pontuação' },
                    { id: 'bonus-vitoria', label: 'Bónus por vitória com grande margem' },
                    { id: 'bonus-shutout', label: 'Bónus por vitória sem conceder frames' }
                ]
            },
            'duplo-ko': {
                description: 'Jogador é eliminado apenas após duas derrotas (chave vencedores + chave perdedores).',
                defaultPoints: { vitoria: 1, empate: 0, derrota: 0 },
                criterios: [
                    { id: 'vitoria-1', label: '1ª vitória (1 ponto)' },
                    { id: 'vitoria-2', label: '2ª vitória (2 pontos)' },
                    { id: 'chave-perdedores', label: 'Sobrevivência na chave de perdedores (+1 ponto por vitória)' },
                    { id: 'finalista', label: 'Finalista (5 pontos)' },
                    { id: 'vencedor', label: 'Vencedor (6 pontos)' },
                    { id: 'ranking-final', label: 'Ranking final para pontuação geral' }
                ]
            }
        };

        document.addEventListener('DOMContentLoaded', function () {
            const formato = '@ViewBag.FormatoSelecionado';
            const config = formatosConfig[formato];
            const criteriosList = document.getElementById('criteriosList');

            if (config) {
                // Divide os critérios em duas colunas
                const metade = Math.ceil(config.criterios.length / 2);
                const col1 = config.criterios.slice(0, metade);
                const col2 = config.criterios.slice(metade);
                criteriosList.innerHTML = `
                    <div class='checkbox-column'>
                        ${col1.map(criterio => `
                            <label>
                                <input type=\"checkbox\" name=\"criterios\" value=\"${criterio.id}\" />
                                <strong>${criterio.label}</strong>
                                ${criterio.description ? `<br><span style=\"font-size: 0.9em; color: #666; margin-left: 24px;\">${criterio.description}</span>` : ''} 
                            </label>
                        `).join('')}
                    </div>
                    <div class='checkbox-column'>
                        ${col2.map(criterio => `
                            <label>
                                <input type=\"checkbox\" name=\"criterios\" value=\"${criterio.id}\" />
                                <strong>${criterio.label}</strong>
                                ${criterio.description ? `<br><span style=\"font-size: 0.9em; color: #666; margin-left: 24px;\">${criterio.description}</span>` : ''} 
                            </label>
                        `).join('')}
                    </div>
                `;

                // Define os pontos padrão se não houver configuração existente
                const vitoriaInput = document.getElementById('vitoria');
                const empateInput = document.getElementById('empate');
                const derrotaInput = document.getElementById('derrota');

                if (vitoriaInput.value === '0' && empateInput.value === '0' && derrotaInput.value === '0') {
                    vitoriaInput.value = config.defaultPoints.vitoria;
                    empateInput.value = config.defaultPoints.empate;
                    derrotaInput.value = config.defaultPoints.derrota;
                }

                // Preencher critérios já configurados
                const criteriosSalvos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(configuracao?.CriteriosDesempate ?? new List<string>()));
                if (criteriosSalvos && Array.isArray(criteriosSalvos)) {
                    criteriosSalvos.forEach(function(crit) {
                        const checkbox = document.querySelector('input[type="checkbox"][name="criterios"][value="' + crit + '"]');
                        if (checkbox) checkbox.checked = true;
                    });
                }
            }
        });
    </script>
</body>
</html>
