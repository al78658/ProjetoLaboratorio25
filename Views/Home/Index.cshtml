﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>

    @if (!User.Identity.IsAuthenticated)
    {
        <meta charset="UTF-8" />
        <title>Homepage - Bilhar</title>
        <style>
            * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            }

            body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            color: #333;
            }

            .container {
            max-width: 1100px;
            margin: 0 auto;
            min-height: 100vh;
            padding: 40px 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            }

            .top-bar {
            width: 100%;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 16px;
            position: relative;
            }

            .search-box {
            display: flex;
            align-items: center;
            border: 2px solid #ccc;
            border-radius: 30px;
            background: white;
            padding: 8px 20px;
            }

            .search-box input {
            border: none;
            outline: none;
            padding: 10px;
            font-size: 16px;
            width: 280px;
            }

            .button {
            background: white;
            border: 2px solid black;
            border-radius: 8px;
            padding: 14px 24px;
            cursor: pointer;
            font-size: 18px;
            text-decoration: none;
            color: black;
            display: inline-block;
            text-align: center;
            }

            .button:hover {
            background-color: #dcdcdc;
            }

            .icon {
            font-size: 26px;
            text-decoration: none;
            color: black;
            background: none;
            border: none;
            cursor: pointer;
            position: relative;
            }

            .icon:hover {
            transform: scale(1.2);
            transition: transform 0.2s ease-in-out;
            }

            .notification-box {
            position: absolute;
            top: 60px;
            right: 0;
            width: 320px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: none;
            z-index: 1000;
            }

            .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            background-color: #f9f9f9;
            }

            .close-btn {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            }

            .notification-list {
                list-style: none;
                padding: 0;
                margin: 0;
                display: flex;
                flex-direction: column; /* ordem normal, de cima para baixo */
                max-height: 300px; /* altura para cerca de 3 notificações */
                overflow-y: auto;
                overflow-x: hidden;
            }

                /* Scrollbar visível (funciona nos navegadores WebKit como Chrome/Edge) */
                .notification-list::-webkit-scrollbar {
                    width: 8px;
                }

                .notification-list::-webkit-scrollbar-track {
                    background: #f0f0f0;
                    border-radius: 10px;
                }

                .notification-list::-webkit-scrollbar-thumb {
                    background-color: #aaa;
                    border-radius: 10px;
                }

            .notification-list li {
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            font-size: 14px;
            color: #333;
            }

            .notification-list li:last-child {
            border-bottom: none;
            }

            .main {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 30px;
            flex-grow: 1;
            justify-content: center;
            width: 100%;
            text-align: center;
            }

            .main-image {
            width: 320px;
            margin-top: 20px;
            margin-bottom: 30px;
            }

            h1 {
            font-size: 24px;
            color: white;
            margin-bottom: 40px;
            }

            .main-buttons {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
            }

            .main-buttons .button {
            padding: 36px 60px;
            font-size: 22px;
            min-width: 280px;
            border-radius: 14px;
            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);
            }

            media (max-width: 900px) {
            .main-buttons

            {
            flex-direction: column;
            gap: 24px;
            }

            .main-buttons .button {
            width: 100%;
            max-width: 300px;
            font-size: 18px;
            padding: 30px 36px;
            }

            .search-box input {
            width: 200px;
            }

            .main-image {
            width: 240px;
            }

            h1 {
            font-size: 20px;
            }

            }
        </style>
    }
    else{
        <meta charset="UTF-8" />
        <title>Pagina inicial</title>
        <style>

            * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            }

            body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            color: #333;
            }

            .container {
            max-width: 1100px;
            margin: 0 auto;
            min-height: 100vh;
            padding: 40px 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            }

            .top-bar {
            width: 100%;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 16px;
            position: relative;
            }

            .search-box {
            display: flex;
            align-items: center;
            border: 2px solid #ccc;
            border-radius: 30px;
            background: white;
            padding: 8px 20px;
            }

            .search-box input {
            border: none;
            outline: none;
            padding: 10px;
            font-size: 16px;
            width: 280px;
            }

            .button {
            background: white;
            border: 2px solid black;
            border-radius: 8px;
            padding: 14px 24px;
            cursor: pointer;
            font-size: 18px;
            text-decoration: none;
            color: black;
            display: inline-block;
            text-align: center;
            }

            .button:hover {
            background-color: #dcdcdc;
            }

            .icon {
            font-size: 26px;
            text-decoration: none;
            color: black;
            background: none;
            border: none;
            cursor: pointer;
            position: relative;
            }

            .icon:hover {
            transform: scale(1.2);
            transition: transform 0.2s ease-in-out;
            }

            .notification-box {
            position: absolute;
            top: 60px;
            right: 0;
            width: 320px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: none;
            z-index: 1000;
            }

            .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            background-color: #f9f9f9;
            }

            .close-btn {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            }

            .notification-list {
                list-style: none;
                padding: 0;
                margin: 0;
                display: flex;
                flex-direction: column; /* ordem normal, de cima para baixo */
                max-height: 270px; /* altura para cerca de 3 notificações */
                overflow-y: auto;
                overflow-x: hidden;
            }

                /* Scrollbar visível (funciona nos navegadores WebKit como Chrome/Edge) */
                .notification-list::-webkit-scrollbar {
                    width: 8px;
                }

                .notification-list::-webkit-scrollbar-track {
                    background: #f0f0f0;
                    border-radius: 10px;
                }

                .notification-list::-webkit-scrollbar-thumb {
                    background-color: #aaa;
                    border-radius: 10px;
                }

            .notification-list li {
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            font-size: 14px;
            color: #333;
            }

            .notification-list li:last-child {
            border-bottom: none;
            }

            .main {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            flex-grow: 1;
            justify-content: center;
            width: 100%;
            text-align: center;
            }

            .main-image {
            width: 320px;
            margin-top: 0px;
            margin-bottom: 10px;
            }

            h1 {
            font-size: 24px;
            color: white;
            margin-bottom: 40px;
            }

            .main-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px 48px;
            justify-content: center;
            align-items: start;
            margin-top: 10px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            }

            .main-buttons .button {
            width: 100%;
            min-width: 260px;
            height: 90px;
            font-size: 22px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 14px;
            box-shadow: 4px 4px 8px rgba(0,0,0,0.15);
            background: white;
            border: 2px solid #333;
            cursor: pointer;
            transition: background 0.2s;
            padding: 0;
            }

            .main-buttons .button:hover {
            background: #dcdcdc;
            }

            media (max-width: 900px) {
            .main-buttons

            {
            flex-direction: column;
            gap: 24px;
            }

            .main-buttons .button {
            width: 100%;
            max-width: 300px;
            font-size: 18px;
            padding: 30px 36px;
            }

            .search-box input {
            width: 200px;
            }

            .main-image {
            width: 240px;
            }

            h1 {
            font-size: 20px;
            }

            }
        </style>
    }
</head>
<body>
    @if (User.Identity.IsAuthenticated)
    {

        <div class="container">

            <!-- TOPO DIREITO -->
            <div class="top-bar">
                <div class="search-box">
                    <span style="font-size: 18px; margin-right: 10px;">🔍</span>
                    <input type="text" id="searchInput" placeholder="Pesquise um jogador ou equipa">
                </div>
                <button id="searchButton" class="button">Pesquisar</button>
                <a href="/Admin" class="button" style="margin-right: 10px;">Administração</a>
                <a href="/Home/Logout" class="button">Logout</a>
                
                <!-- Resultados da pesquisa -->
                <div id="searchResults" style="display: none; position: absolute; top: 60px; right: 120px; width: 320px; background-color: #fff; border: 1px solid #ccc; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 1000;">
                    <div style="padding: 12px 16px; border-bottom: 1px solid #eee; background-color: #f9f9f9; display: flex; justify-content: space-between; align-items: center;">
                        <strong>Resultados da Pesquisa</strong>
                        <button id="closeSearchResults" style="background: none; border: none; font-size: 18px; cursor: pointer;">×</button>
                    </div>
                    <ul id="searchResultsList" style="list-style: none; padding: 0; margin: 0; max-height: 300px; overflow-y: auto;"></ul>
                </div>
                <!-- Botão do sino -->
                <button id="notificationButton" class="icon" title="Ver notificações">🔔</button>

                <!-- Caixa de notificações -->
                <div id="notificationBox" class="notification-box">
                    <div class="notification-header">
                        <strong>Notificações</strong>
                        <button id="closeNotification" class="close-btn">&times;</button>
                    </div>
                    <ul class="notification-list" id="notificacoesDinamicas">
                    </ul>
                </div>
            </div>

            <!-- CONTEÚDO CENTRAL -->
            <div class="main">
                <img src="img/logotipo.png" alt="Logotipo" class="main-image" />
                <h1>Começa a Gerir Competições de Bilhar AGORA!</h1>

                <div class="main-buttons">
                    <a href="/CriarCompeticao" class="button">Criar Competição</a>
                    <a href="/Competicoes" class="button">Administrar Competições</a>
                    <a href="/Regras" class="button">Regras e Regulamentos</a>
                    <a href="/Ranking" class="button">Ranking</a>
                    <a href="/"></a>
                </div>
            </div>

        </div>
        <script>
            const notificationButton = document.getElementById('notificationButton');
            const notificationBox = document.getElementById('notificationBox');
            const closeNotification = document.getElementById('closeNotification');

            // Alterna a visibilidade da caixa de notificações ao clicar no botão do sino
            notificationButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Impede que o clique se propague para o documento
            notificationBox.style.display = notificationBox.style.display === 'block' ? 'none' : 'block';
            if (notificationBox.style.display === 'block') {
                const lista = document.getElementById('notificacoesDinamicas');
                lista.scrollTop = lista.scrollHeight;
            }
            });

            // Fecha a caixa de notificações ao clicar no botão de fechar
            closeNotification.addEventListener('click', () => {
            notificationBox.style.display = 'none';
            });

            // Fecha a caixa de notificações ao clicar fora dela
            document.addEventListener('click', (event) => {
            if (!notificationBox.contains(event.target) && !notificationButton.contains(event.target)) {
            notificationBox.style.display = 'none';
            }
            });

            // Notificações dinâmicas de vitórias
            async function carregarNotificacoesVitorias() {
                const notificacoesDinamicas = document.getElementById('notificacoesDinamicas');
                if (!notificacoesDinamicas) {
                    console.log('Elemento de notificações não encontrado');
                    return;
                }
                
                notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;">Carregando notificações...</div></li>';
                
                try {
                    const response = await fetch('/Home/ObterNotificacoes', {
                        headers: {
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    
                    const notificacoes = await response.json();
                    notificacoesDinamicas.innerHTML = '';
                    
                    if (!Array.isArray(notificacoes) || notificacoes.length === 0) {
                        notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;">Nenhuma notificação encontrada</div></li>';
                        return;
                    }
                    
                    notificacoes.reverse().forEach(n => {
                        const noticia = `
                            <li>
                                <div style='font-size:13px; color:#888; margin-bottom:2px;'>${n.dataNotificacao}</div>
                                <div><strong>${n.clube1} vs ${n.clube2}</strong></div>
                                ${n.clubeVitorioso ? `<div>${n.clubeVitorioso} venceu o jogo (${n.pontuacao1}-${n.pontuacao2}).</div>` : ''}
                                <span style='font-size:13px; color:#666;'>Motivo: ${n.motivo}</span>
                            </li>`;
                        notificacoesDinamicas.insertAdjacentHTML('beforeend', noticia);
                    });
                } catch (error) {
                    console.log('Erro ao carregar notificações:', error);
                    notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;color:#666;">Carregando notificações...</div></li>';
                }
            }
            
            // Carregar notificações inicialmente apenas se o elemento existir
            const notificacoesDinamicas = document.getElementById('notificacoesDinamicas');
            if (notificacoesDinamicas) {
                carregarNotificacoesVitorias();
                
                // Recarregar notificações a cada 30 segundos
                setInterval(carregarNotificacoesVitorias, 30000);
            }
        </script>
    }
    else
    {

        <div class="container">

            <!-- TOPO DIREITO -->
            <div class="top-bar">
                <div class="search-box">
                    <span style="font-size: 18px; margin-right: 10px;">🔍</span>
                    <input type="text" placeholder="Pesquise um jogador ou equipa">
                </div>
                <a href="/Dados" class="button">Pesquisar</a>
                <a href="/Login" class="button">Login</a>
                <!-- Botão do sino -->
                <button id="notificationButton" class="icon" title="Ver notificações">🔔</button>

                <!-- Caixa de notificações -->
                <div id="notificationBox" class="notification-box">
                    <div class="notification-header">
                        <strong>Notificações</strong>
                        <button id="closeNotification" class="close-btn">&times;</button>
                    </div>
                    <ul class="notification-list" id="notificacoesDinamicas">
                    </ul>
                </div>
            </div>

            <!-- CONTEÚDO CENTRAL -->
            <div class="main">
                <img src="img/logotipo.png" alt="Logotipo" class="main-image" />
                <h1>Começa a acompanhar Torneios de Bilhar AGORA!</h1>

                <div class="main-buttons">
                    <a href="/Competicoes" class="button">Competições</a>
                    <a href="/Regras" class="button">Regras e Regulamentos</a>
                    <a href="/Ranking" class="button">Ranking</a>
                </div>
            </div>

        </div>
        <script>
            const notificationButton = document.getElementById('notificationButton');
            const notificationBox = document.getElementById('notificationBox');
            const closeNotification = document.getElementById('closeNotification');

            // Alterna a visibilidade da caixa de notificações ao clicar no botão do sino
            notificationButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Impede que o clique se propague para o documento
            notificationBox.style.display = notificationBox.style.display === 'block' ? 'none' : 'block';
            if (notificationBox.style.display === 'block') {
                const lista = document.getElementById('notificacoesDinamicas');
                lista.scrollTop = lista.scrollHeight;
            }
            });

            // Fecha a caixa de notificações ao clicar no botão de fechar
            closeNotification.addEventListener('click', () => {
            notificationBox.style.display = 'none';
            });

            // Fecha a caixa de notificações ao clicar fora dela
            document.addEventListener('click', (event) => {
            if (!notificationBox.contains(event.target) && !notificationButton.contains(event.target)) {
            notificationBox.style.display = 'none';
            }
            });

            // Notificações dinâmicas de vitórias
            async function carregarNotificacoesVitorias() {
                const notificacoesDinamicas = document.getElementById('notificacoesDinamicas');
                if (!notificacoesDinamicas) {
                    console.log('Elemento de notificações não encontrado');
                    return;
                }
                
                notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;">Carregando notificações...</div></li>';
                
                try {
                    const response = await fetch('/Home/ObterNotificacoes', {
                        headers: {
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    
                    const notificacoes = await response.json();
                    notificacoesDinamicas.innerHTML = '';
                    
                    if (!Array.isArray(notificacoes) || notificacoes.length === 0) {
                        notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;">Nenhuma notificação encontrada</div></li>';
                        return;
                    }
                    
                    notificacoes.reverse().forEach(n => {
                        const noticia = `
                            <li>
                                <div style='font-size:13px; color:#888; margin-bottom:2px;'>${n.dataNotificacao}</div>
                                <div><strong>${n.clube1} vs ${n.clube2}</strong></div>
                                ${n.clubeVitorioso ? `<div>${n.clubeVitorioso} venceu o jogo (${n.pontuacao1}-${n.pontuacao2}).</div>` : ''}
                                <span style='font-size:13px; color:#666;'>Motivo: ${n.motivo}</span>
                            </li>`;
                        notificacoesDinamicas.insertAdjacentHTML('beforeend', noticia);
                    });
                } catch (error) {
                    console.log('Erro ao carregar notificações:', error);
                    notificacoesDinamicas.innerHTML = '<li><div style="text-align:center;padding:10px;color:#666;">Carregando notificações...</div></li>';
                }
            }
            
            // Carregar notificações inicialmente apenas se o elemento existir
            const notificacoesDinamicas = document.getElementById('notificacoesDinamicas');
            if (notificacoesDinamicas) {
                carregarNotificacoesVitorias();
                
                // Recarregar notificações a cada 30 segundos
                setInterval(carregarNotificacoesVitorias, 30000);
            }
        </script>
        

    }
    
    <!-- Script para pesquisa de jogadores -->
    <script>
        // Função para inicializar a pesquisa
        function inicializarPesquisa() {
            console.log("Inicializando pesquisa...");
            
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const searchResults = document.getElementById('searchResults');
            const searchResultsList = document.getElementById('searchResultsList');
            const closeSearchResults = document.getElementById('closeSearchResults');
            
            console.log("Elementos:", {
                searchInput: !!searchInput,
                searchButton: !!searchButton,
                searchResults: !!searchResults,
                searchResultsList: !!searchResultsList,
                closeSearchResults: !!closeSearchResults
            });
            
            if (!searchInput || !searchButton || !searchResults || !searchResultsList || !closeSearchResults) {
                console.error("Elementos de pesquisa não encontrados");
                return; // Elementos não encontrados
            }
            
            // Fechar resultados da pesquisa
            closeSearchResults.addEventListener('click', function() {
                searchResults.style.display = 'none';
            });
            
            // Pesquisar jogadores
            searchButton.addEventListener('click', function() {
                console.log("Botão de pesquisa clicado");
                const termo = searchInput.value.trim();
                if (!termo) {
                    console.log("Termo de pesquisa vazio");
                    return;
                }
                
                console.log("Pesquisando por:", termo);
                
                // Obter jogadores do localStorage - verificar várias chaves possíveis
                let jogadoresStr = localStorage.getItem('jogadoresImportados');
                
                // Se não encontrar na primeira chave, tenta outras chaves comuns
                if (!jogadoresStr) {
                    console.log("Tentando encontrar jogadores em outras chaves...");
                    const possiveisChaves = [
                        'jogadores',
                        'jogadoresParaEmparelhar',
                        'jogadoresLista',
                        'Jogadores'
                    ];
                    
                    for (const chave of possiveisChaves) {
                        const dados = localStorage.getItem(chave);
                        if (dados) {
                            console.log(`Jogadores encontrados na chave: ${chave}`);
                            jogadoresStr = dados;
                            break;
                        }
                    }
                }
                
                if (!jogadoresStr) {
                    console.log("Nenhum jogador encontrado em nenhuma chave do localStorage");
                    searchResultsList.innerHTML = '<li style="padding: 12px 16px;">Nenhum jogador/clube encontrado.</li>';
                    searchResults.style.display = 'block';
                    return;
                }
                
                try {
                    const jogadores = JSON.parse(jogadoresStr);
                    console.log("Jogadores encontrados:", jogadores.length);
                    
                    // Verificar se os jogadores têm a estrutura esperada
                    let jogadoresProcessados = jogadores;
                    if (jogadores.length > 0 && !jogadores[0].nome) {
                        console.log("Formato de jogador inesperado:", jogadores[0]);
                        // Tentar adaptar o formato se necessário
                        if (typeof jogadores[0] === 'string') {
                            // Se for uma lista de strings, criar objetos
                            jogadoresProcessados = jogadores.map(j => ({ nome: j, codigo: '', clube: '' }));
                            console.log("Jogadores reformatados:", jogadoresProcessados.length);
                        }
                    }
                    
                    // Filtrar jogadores e clubes
                    const resultados = jogadoresProcessados.filter(j => {
                        const nomeMatch = j.nome && j.nome.toLowerCase().includes(termo.toLowerCase());
                        const codigoMatch = j.codigo && j.codigo.toLowerCase().includes(termo.toLowerCase());
                        const clubeMatch = j.clube && j.clube.toLowerCase().includes(termo.toLowerCase());
                        return nomeMatch || codigoMatch || clubeMatch;
                    });
                    
                    // Extrair clubes únicos para pesquisa de equipes
                    const clubesUnicos = [];
                    const clubesJaAdicionados = {};
                    
                    jogadoresProcessados.forEach(j => {
                        if (j.clube && j.clube.trim() !== '' && !clubesJaAdicionados[j.clube]) {
                            if (j.clube.toLowerCase().includes(termo.toLowerCase())) {
                                clubesUnicos.push({
                                    nome: j.clube,
                                    isClube: true,
                                    jogadores: jogadoresProcessados.filter(jogador => jogador.clube === j.clube)
                                });
                                clubesJaAdicionados[j.clube] = true;
                            }
                        }
                    });
                    
                    console.log("Resultados encontrados:", resultados.length);
                    
                    // Exibir resultados (jogadores e clubes)
                    const todosResultados = [...resultados, ...clubesUnicos];
                    
                    if (todosResultados.length === 0) {
                        searchResultsList.innerHTML = '<li style="padding: 12px 16px;">Nenhum jogador ou equipa encontrado.</li>';
                    } else {
                        searchResultsList.innerHTML = '';
                        
                        // Primeiro exibir jogadores
                        if (resultados.length > 0) {
                            const headerJogadores = document.createElement('li');
                            headerJogadores.style.padding = '8px 16px';
                            headerJogadores.style.backgroundColor = '#f0f0f0';
                            headerJogadores.style.fontWeight = 'bold';
                            headerJogadores.textContent = 'Jogadores';
                            searchResultsList.appendChild(headerJogadores);
                            
                            resultados.forEach(jogador => {
                                const li = document.createElement('li');
                                li.style.padding = '12px 16px';
                                li.style.borderBottom = '1px solid #eee';
                                li.style.cursor = 'pointer';
                                
                                li.innerHTML = `
                                    <strong>${jogador.nome || 'Sem nome'}</strong> ${jogador.codigo ? `(${jogador.codigo})` : ''}<br>
                                    <small>${jogador.categoria || ''} ${jogador.clube ? `- ${jogador.clube}` : ''}</small>
                                `;
                                
                                li.addEventListener('click', function() {
                                    // Limpar qualquer seleção anterior
                                    localStorage.removeItem('equipaSelecionada');
                                    // Armazenar jogador selecionado e redirecionar para a página de detalhes
                                    localStorage.setItem('jogadorSelecionado', JSON.stringify(jogador));
                                    window.location.href = '/Dados';
                                });
                                
                                searchResultsList.appendChild(li);
                            });
                        }
                        
                        // Depois exibir clubes
                        if (clubesUnicos.length > 0) {
                            const headerClubes = document.createElement('li');
                            headerClubes.style.padding = '8px 16px';
                            headerClubes.style.backgroundColor = '#f0f0f0';
                            headerClubes.style.fontWeight = 'bold';
                            headerClubes.textContent = 'Equipas';
                            searchResultsList.appendChild(headerClubes);
                            
                            clubesUnicos.forEach(clube => {
                                const li = document.createElement('li');
                                li.style.padding = '12px 16px';
                                li.style.borderBottom = '1px solid #eee';
                                li.style.cursor = 'pointer';
                                
                                li.innerHTML = `
                                    <strong>Equipa: ${clube.nome}</strong><br>
                                    <small>${clube.jogadores.length} jogadores</small>
                                `;
                                
                                li.addEventListener('click', function() {
                                    // Limpar qualquer seleção anterior
                                    localStorage.removeItem('jogadorSelecionado');
                                    // Armazenar equipe selecionada e redirecionar para a página de detalhes
                                    localStorage.setItem('equipaSelecionada', JSON.stringify(clube));
                                    window.location.href = '/Dados';
                                });
                                
                                searchResultsList.appendChild(li);
                            });
                        }
                    }
                    
                    searchResults.style.display = 'block';
                } catch (error) {
                    console.error("Erro ao processar jogadores:", error);
                    searchResultsList.innerHTML = '<li style="padding: 12px 16px;">Erro ao processar jogadores.</li>';
                    searchResults.style.display = 'block';
                }
            });
            
            // Pesquisar ao pressionar Enter
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchButton.click();
                }
            });
            
            console.log("Pesquisa inicializada com sucesso");
        }
        
        // Inicializar a pesquisa quando o documento estiver pronto
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', inicializarPesquisa);
        } else {
            inicializarPesquisa();
        }
    </script>
</body>
</html>

