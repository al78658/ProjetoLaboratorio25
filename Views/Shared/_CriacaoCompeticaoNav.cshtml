@model dynamic

@{
    string etapaAtual = Model.etapaAtual as string;
    bool edicao = Model.edicao != null && (bool)Model.edicao;
    var etapas = new List<(string Nome, string Controller, string Action, string Icone)>
    {
        ("Definir Competi√ß√£o", "CriarCompeticao", "Index", "üìù"),
        ("Formato da Competi√ß√£o", "FormatodaCompeticao", "Index", "üèÜ"),
        ("Lista de Jogadores", "ListadeJogadores", "Index", "üë•"),
        ("Emparelhamento", "Emparelhamento", "Index", "üîÑ")
    };
}

<div class="criacao-nav">
    <div class="criacao-nav-title">Etapas de Cria√ß√£o</div>
    <div class="criacao-nav-steps">
        @foreach (var etapa in etapas)
        {
            var isActive = etapa.Nome == etapaAtual;
            var isDisabled = edicao && etapa.Nome != "Formato da Competi√ß√£o";
            <a href="/@etapa.Controller" class="criacao-nav-step @(isActive ? "active" : "") @(isDisabled ? "disabled" : "")" 
               data-controller="@etapa.Controller" data-action="@etapa.Action"
               @(isDisabled ? "tabindex='-1' onclick='event.preventDefault(); this.classList.add(\"active\"); return false;' style='opacity:0.5;'" : "onclick=\"return verificarNavegacao('" + etapa.Controller + "')\"")>
                <span class="criacao-nav-icon">@etapa.Icone</span>
                <span class="criacao-nav-text">@etapa.Nome</span>
            </a>
        }
    </div>
</div>

<style>
    .criacao-nav {
        position: fixed;
        top: 120px;
        right: 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        padding: 15px;
        z-index: 1000;
        width: 220px;
    }

    .criacao-nav-title {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 10px;
        text-align: center;
        color: #333;
    }

    .criacao-nav-steps {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .criacao-nav-step {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-radius: 6px;
        text-decoration: none;
        color: #333;
        transition: background-color 0.2s;
    }

    .criacao-nav-step:hover {
        background-color: #f0f0f0;
    }

    .criacao-nav-step.active {
}
.criacao-nav-step.disabled {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed;
}
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }
    
    .criacao-nav-step.completed {
        background-color: #e8f5e9;
        border-left: 3px solid #4CAF50;
    }

    .criacao-nav-icon {
        margin-right: 10px;
        font-size: 18px;
    }

    .criacao-nav-text {
        font-size: 14px;
    }

    @@media (max-width: 768px) {
        .criacao-nav {
            position: static;
            width: 90%;
            margin: 10px auto;
            margin-bottom: 20px;
        }
        
        .criacao-nav-steps {
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .criacao-nav-step {
            flex-direction: column;
            text-align: center;
            padding: 8px;
        }
        
        .criacao-nav-icon {
            margin-right: 0;
            margin-bottom: 5px;
        }
    }
</style>

<script>
    // Fun√ß√£o para verificar navega√ß√£o entre etapas
    function verificarNavegacao(controller) {
        const nomeCompeticao = localStorage.getItem('nomeCompeticao');
        const modoEdicao = '@edicao' === 'True' || localStorage.getItem('modoEdicao') === 'true';
        
        // Se estamos em modo de edi√ß√£o, permitir navega√ß√£o apenas para Formato da Competi√ß√£o
        if (modoEdicao === true || modoEdicao === 'true') {
            if (controller === 'FormatodaCompeticao') {
                // Salvar o estado atual antes de navegar
                return true;
            } else {
                // Para outras etapas, apenas destacar visualmente
                event.preventDefault();
                const links = document.querySelectorAll('.criacao-nav-step');
                links.forEach(link => {
                    link.classList.remove('active');
                });
                event.currentTarget.classList.add('active');
                return false;
            }
        }
        
        // Sempre permitir voltar para a primeira etapa
        if (controller === 'CriarCompeticao') {
            return true;
        }
        
        // Para outras etapas, verificar se temos nome de competi√ß√£o
        if (!nomeCompeticao) {
            alert('Voc√™ precisa definir uma competi√ß√£o primeiro.');
            window.location.href = '/CriarCompeticao';
            return false;
        }
        
        // Verificar requisitos para cada etapa
        if (controller === 'ListadeJogadores' || controller === 'Emparelhamento') {
            const formatosSelecionados = localStorage.getItem('formatosSelecionados');
            if (!formatosSelecionados) {
                alert('Voc√™ precisa definir o formato da competi√ß√£o primeiro.');
                window.location.href = '/FormatodaCompeticao';
                return false;
            }
        }
        
        // Bloquear acesso ao emparelhamento se n√£o houver lista de jogadores/equipas
        if (controller === 'Emparelhamento') {
            const tipoCompeticao = localStorage.getItem('tipoCompeticao');
            if (tipoCompeticao === 'equipas') {
                const equipas = localStorage.getItem('equipasList');
                if (!equipas) {
                    alert('Adicione equipas antes de aceder ao emparelhamento.');
                    return false;
                }
            } else {
                const jogadores = localStorage.getItem('jogadoresList');
                if (!jogadores) {
                    alert('Adicione jogadores antes de aceder ao emparelhamento.');
                    return false;
                }
            }
        }
        return true;
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // Verificar se h√° uma competi√ß√£o em andamento
        const competicaoId = '@ViewBag.CompeticaoId' || localStorage.getItem('competicaoId');
        const nomeCompeticao = localStorage.getItem('nomeCompeticao');
        
        // Determinar qual etapa est√° ativa com base na URL atual
        const currentPath = window.location.pathname.toLowerCase();
        const etapas = [
            { path: '/criarcompeticao', index: 0 },
            { path: '/formatodacompeticao', index: 1 },
            { path: '/listadejogadores', index: 2 },
            { path: '/emparelhamento', index: 3 }
        ];
        
        const currentEtapaIndex = etapas.findIndex(e => currentPath.includes(e.path));
        
        // Verificar o progresso e habilitar/desabilitar links conforme necess√°rio
        const links = document.querySelectorAll('.criacao-nav-step');
        
        // Verificar se estamos na primeira etapa (CriarCompeticao)
        const isFirstStep = currentPath.includes('/criarcompeticao');
        
        if (!nomeCompeticao && !isFirstStep) {
            // Se n√£o houver nome de competi√ß√£o e n√£o estamos na primeira etapa,
            // redirecionar para a primeira etapa
            window.location.href = '/CriarCompeticao';
            return;
        }
        
        // Permitir acesso livre a todas as etapas se j√° existe nomeCompeticao
        // S√≥ impedir acesso se n√£o houver nomeCompeticao e n√£o estiver na primeira etapa
        if (!nomeCompeticao && !isFirstStep) {
            window.location.href = '/CriarCompeticao';
            return;
        }
        
        // Adicionar informa√ß√£o sobre a competi√ß√£o atual
        if (nomeCompeticao) {
            const navTitle = document.querySelector('.criacao-nav-title');
            const tipoCompeticao = localStorage.getItem('tipoCompeticao') || '';
            const tipoTexto = tipoCompeticao === 'equipas' ? 'Equipas' : 'Individual';
            
            navTitle.innerHTML = `Etapas de Cria√ß√£o<br><small style="font-weight:normal;font-size:12px;">${nomeCompeticao} (${tipoTexto})</small>`;
        }
    });
</script>