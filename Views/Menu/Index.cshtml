﻿﻿﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Dashboard de Resultados</title>
    <style>
        * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        }

        body {
        font-family: Arial, sans-serif;
        background-color: #808080;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 30px 16px;
        position: relative;
        }

        .top-left-logo {
        position: absolute;
        top: 40px;
        left: 50px;
        }

        .top-left-logo img {
        width: 160px;
        }

        .back-button {
        position: absolute;
        right: 40px;
        bottom: 40px;
        padding: 10px 22px;
        font-size: 18px;
        border: 2px solid #000;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        color: black;
        }

        .back-button:hover {
        background-color: #dcdcdc;
        }

        h2 {
        font-size: 30px;
        color: black;
        margin: 24px 0 16px;
        text-align: center;
        }

        .content-wrapper {
        max-width: 940px;
        width: 100%;
        }

        .table-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 12px;
        justify-content: flex-end;
        }

        .table-buttons button {
        padding: 8px 16px;
        border: 2px solid black;
        background: white;
        border-radius: 8px;
        font-size: 15px;
        cursor: pointer;
        }

        .table-buttons button:hover {
        background-color: #e0e0e0;
        }

        table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        margin-bottom: 32px;
        }

        th, td {
        padding: 10px;
        border: 1px solid #888;
        text-align: center;
        font-size: 15px;
        }

        th {
        background-color: #ccc;
        }

        tr:nth-child(even) {
        background-color: #f2f2f2;
        }

        .form-box {
        display: inline-block;
        width: 22px;
        height: 22px;
        line-height: 22px;
        text-align: center;
        border-radius: 4px;
        font-weight: bold;
        color: white;
        margin: 0 2px;
        font-size: 14px;
        }

        .form-v {
        background-color: green;
        }

        .form-e {
        background-color: yellow;
        color: black;
        }

        .form-d {
        background-color: red;
        }

        .section {
        margin-top: 30px;
        }

        .result-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        flex-wrap: wrap;
        gap: 10px;
        }

        .result-nav .left-buttons {
        display: flex;
        gap: 10px;
        flex-direction: row-reverse;
        }

        .result-nav button, .result-nav span {
        padding: 8px 16px;
        border: 2px solid black;
        background: white;
        border-radius: 8px;
        font-size: 15px;
        cursor: pointer;
        }

        .result-nav button:hover {
        background-color: #e0e0e0;
        }

        .date-navigation {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 18px;
        }

            .date-navigation button {
                padding: 6px 14px;
                border: 2px solid black;
                background: white;
                border-radius: 8px;
                cursor: pointer;
                font-size: 18px;
            }

        #selectedDateDisplay {
            font-weight: bold;
        }

        media (max-width: 768px) {
        .table-buttons, .result-nav

        {
        flex-direction: column;
        align-items: stretch;
        }

        .table-buttons button,
        .result-nav button {
        width: 100%;
        }

        }
    </style>
</head>
<body>
    <div class="top-left-logo">
        <a href="/home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <div class="content-wrapper">
        <!-- Tabela Classificativa -->
        <h2>Tabela Classificativa</h2>
        <div class="table-buttons">
            @if (User.Identity.IsAuthenticated)
            {
                <button type="button" class="login-button" onclick="window.location.href='/CriarRelatorio'">
                    Criar Relatório
                </button>
            }
            <button type="button" class="login-button" onclick="window.location.href='/PesquisarRelatorio'">
                Consultar Relatórios
            </button>
            <button type="button" class="login-button" onclick="window.location.href='/ProximosJogos'">
                Jogos Agendados
            </button>
        </div>
        <table>
            <tr>
                <th>Lugar</th>
                <th>Nome</th>
                <th>Jogos</th>
                <th>Vitórias</th>
                <th>Empates</th>
                <th>Derrotas</th>
                <th>Frames</th>
                <th>Pontuação</th>
                <th>Forma</th>
            </tr>
            <tr>
                <td>1</td>
                <td>Benfica</td>
                <td>3</td>
                <td>20</td>
                <td>12</td>
                <td>2</td>
                <td>14:7</td>
                <td>40</td>
                <td><span class="form-box form-v">V</span><span class="form-box form-d">D</span><span class="form-box form-v">V</span></td>
            </tr>
            <tr>
                <td>2</td>
                <td>Porto</td>
                <td>2</td>
                <td>12</td>
                <td>8</td>
                <td>15</td>
                <td>6:17</td>
                <td>28</td>
                <td><span class="form-box form-e">E</span><span class="form-box form-d">D</span><span class="form-box form-d">D</span></td>
            </tr>
            <tr>
                <td>3</td>
                <td>Sporting</td>
                <td>4</td>
                <td>7</td>
                <td>12</td>
                <td>20</td>
                <td>18:9</td>
                <td>11</td>
                <td><span class="form-box form-d">D</span><span class="form-box form-e">E</span><span class="form-box form-v">V</span></td>
            </tr>
        </table>

        <!-- Resultados -->
        <div class="section">
            <h2>Resultados</h2>
            <div class="table-buttons">
                <div>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <button type="button" class="login-button" onclick="guardarDataEIrParaPontuacoes()">
                            Alterar Resultados
                        </button>
                    }
                    <button type="button" class="login-button" onclick="window.location.href='/Historico'">
                        Histórico
                    </button>
                        <button id="prevDayBtn">&lt;</button>
                        <span id="selectedDateDisplay"></span>
                        <button id="nextDayBtn">&gt;</button>
                </div>
            </div>
            <table>
                <tr>
                    <th>Partidas</th>
                    <th>Horário</th>
                    <th>Resultado</th>
                    <th>Motivo</th>
                </tr>
                <tr>
                    <td>Higgins e Andres vs Federer e Nadal</td>
                    <td>19h30</td>
                    <td>Por definir</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Marco vs Alberto</td>
                    <td>18h45</td>
                    <td>-</td>
                    <td>Falta de Comparência</td>
                </tr>
                <tr>
                    <td>Andrea vs Caspirenovic</td>
                    <td>17h15</td>
                    <td>5 - 11</td>
                    <td></td>
                </tr>
            </table>
        </div>
    </div>

    <a href="/Competicoes" class="back-button">&lt;Voltar</a>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const nomeCompeticao = localStorage.getItem('competicaoSelecionada');
            const tabelaResultados = document.querySelector('.section table');
            const prevBtn = document.getElementById('prevDayBtn');
            const nextBtn = document.getElementById('nextDayBtn');
            const dateDisplay = document.getElementById('selectedDateDisplay');

            if (!nomeCompeticao) {
                alert('Nenhuma competição selecionada.');
                return;
            }

            const chaveAgendamento = `agendamentos_${nomeCompeticao}`;
            const agendamentos = JSON.parse(localStorage.getItem(chaveAgendamento)) || [];

            // Atualiza o título da secção
            const h2 = document.querySelector('.section h2');
            h2.textContent = `Resultados – ${nomeCompeticao}`;

            // Estado de data atual
            let currentDate = new Date();

            function formatDate(date) {
                return date.toISOString().split('T')[0];
            }

            function formatDisplayDate(date) {
                return date.toLocaleDateString('pt-PT', {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric'
                });
            }

            function updateDateDisplay() {
                dateDisplay.textContent = formatDisplayDate(currentDate);
            }

            function renderTableForDate(date) {
                // Limpa todas as linhas exceto o cabeçalho
                const rows = tabelaResultados.querySelectorAll('tr');
                rows.forEach((row, index) => { if (index > 0) row.remove(); });

                const dataFiltrada = formatDate(date);
                const jogosDoDia = agendamentos.filter(a => a.data === dataFiltrada);
                // Carregar resultados do localStorage
                let resultados = JSON.parse(localStorage.getItem(`resultados_${nomeCompeticao}_${dataFiltrada}`)) || [];
                
                // Verificar se os resultados estão no formato correto
                if (resultados && !Array.isArray(resultados)) {
                    console.warn("Formato de resultados inválido, convertendo para array");
                    resultados = [];
                }

                if (jogosDoDia.length === 0) {
                    const row = document.createElement('tr');
                    row.innerHTML = `<td colspan="4">Nenhum jogo agendado para esta data.</td>`;
                    tabelaResultados.appendChild(row);
                    return;
                }

                jogosDoDia.forEach((a, idx) => {
                    // Buscar resultado correspondente
                    const resultado = resultados.find(r => {
                        // Comparar jogadores considerando objetos ou strings
                        let j1Match = false;
                        let j2Match = false;
                        
                        if (typeof r.jogador1 === 'object' && typeof a.jogador1 === 'object') {
                            j1Match = r.jogador1.nome === a.jogador1.nome;
                        } else if (typeof r.jogador1 === 'string' && typeof a.jogador1 === 'string') {
                            j1Match = r.jogador1 === a.jogador1;
                        } else if (typeof r.jogador1 === 'object' && typeof a.jogador1 === 'string') {
                            j1Match = r.jogador1.nome === a.jogador1;
                        } else if (typeof r.jogador1 === 'string' && typeof a.jogador1 === 'object') {
                            j1Match = r.jogador1 === a.jogador1.nome;
                        }
                        
                        if (typeof r.jogador2 === 'object' && typeof a.jogador2 === 'object') {
                            j2Match = r.jogador2.nome === a.jogador2.nome;
                        } else if (typeof r.jogador2 === 'string' && typeof a.jogador2 === 'string') {
                            j2Match = r.jogador2 === a.jogador2;
                        } else if (typeof r.jogador2 === 'object' && typeof a.jogador2 === 'string') {
                            j2Match = r.jogador2.nome === a.jogador2;
                        } else if (typeof r.jogador2 === 'string' && typeof a.jogador2 === 'object') {
                            j2Match = r.jogador2 === a.jogador2.nome;
                        }
                        
                        return j1Match && j2Match;
                    }) || {};
                    
                    // Formatar o texto do resultado
                    let resultadoTexto = '-';
                    if (resultado.pontuacao && resultado.pontuacao !== '0-0') {
                        resultadoTexto = resultado.pontuacao;
                        if (resultado.vencedor) {
                            resultadoTexto += ` (${resultado.vencedor})`;
                        }
                    } else if (resultado.vencedor) {
                        resultadoTexto = `Vitória de ${resultado.vencedor}`;
                    }
                    
                    // Obter o motivo se existir
                    const motivo = resultado.motivo || '';
                    
                    const row = document.createElement('tr');
                    // Verificar se é um emparelhamento de clubes ou jogadores
                    let jogador1Nome, jogador2Nome;
                    
                    if (a.isClube) {
                        // É um emparelhamento de clubes
                        jogador1Nome = a.jogador1.nome;
                        jogador2Nome = a.jogador2.nome;
                    } else {
                        // É um emparelhamento de jogadores individual
                        jogador1Nome = typeof a.jogador1 === 'object' ? a.jogador1.nome : a.jogador1;
                        jogador2Nome = typeof a.jogador2 === 'object' ? a.jogador2.nome : a.jogador2;
                    }
                    
                    row.innerHTML = `
                        <td>${jogador1Nome} vs ${jogador2Nome}</td>
                        <td>${a.hora}</td>
                        <td>${resultadoTexto}</td>
                        <td>${motivo}</td>
                    `;
                    tabelaResultados.appendChild(row);
                });
            }

            // Botões para navegar entre dias
            prevBtn.addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() - 1);
                updateDateDisplay();
                renderTableForDate(currentDate);
            });

            nextBtn.addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() + 1);
                updateDateDisplay();
                renderTableForDate(currentDate);
            });

            // Inicialização
            updateDateDisplay();
            renderTableForDate(currentDate);
        });

        function guardarDataEIrParaPontuacoes() {
            var data = document.getElementById('selectedDateDisplay').textContent;
            // Converter data para formato yyyy-mm-dd
            if (data) {
                // Verificar o formato da data (pode variar dependendo do locale)
                let partes;
                if (data.includes('/')) {
                    partes = data.split('/'); // dd/mm/yyyy
                } else if (data.includes(' de ')) {
                    // Formato português: "dd de mmm de yyyy"
                    const meses = {
                        'jan': '01', 'fev': '02', 'mar': '03', 'abr': '04', 
                        'mai': '05', 'jun': '06', 'jul': '07', 'ago': '08', 
                        'set': '09', 'out': '10', 'nov': '11', 'dez': '12'
                    };
                    const partesComplexas = data.split(' de ');
                    if (partesComplexas.length === 3) {
                        const dia = partesComplexas[0].trim();
                        const mes = partesComplexas[1].trim().toLowerCase().substring(0, 3);
                        const ano = partesComplexas[2].trim();
                        partes = [dia, meses[mes] || '01', ano];
                    }
                }
                
                if (partes && partes.length === 3) {
                    const dataFormatada = `${partes[2]}-${partes[1].padStart(2,'0')}-${partes[0].padStart(2,'0')}`;
                    localStorage.setItem('dataSelecionadaMenu', dataFormatada);
                } else {
                    // Fallback para a data atual se não conseguir converter
                    const hoje = new Date();
                    const dataFormatada = hoje.toISOString().split('T')[0];
                    localStorage.setItem('dataSelecionadaMenu', dataFormatada);
                }
            }
            window.location.href = '/Pontuacoes';
        }
    </script>
    <!-- Modal para motivo de vitória -->
    <div id="motivoModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:1000; align-items:center; justify-content:center;">
        <div style="background:white; padding:32px; border-radius:12px; max-width:400px; margin:120px auto; position:relative;">
            <h3>Motivo da Vitória</h3>
            <input type="hidden" id="motivoInputIdx" />
            <input type="hidden" id="motivoModalVencedor" />
            <input type="hidden" id="motivoModalJ1" />
            <input type="hidden" id="motivoModalJ2" />
            <textarea id="motivoVitoria" style="width:100%; min-height:60px; margin-top:12px; font-size:16px; border-radius:8px; border:1px solid #333;" placeholder="Descreva o motivo..."></textarea>
            <div style="margin-top:18px; text-align:right;">
                <button onclick="confirmarMotivo()" class="btn">Confirmar</button>
                <button onclick="cancelarMotivo()" class="btn" style="margin-left:10px;">Cancelar</button>
            </div>
        </div>
    </div>
</body>
</html>
