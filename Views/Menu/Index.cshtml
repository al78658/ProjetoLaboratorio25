@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Dashboard de Resultados</title>
    <style>
        * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        }

        body {
        font-family: Arial, sans-serif;
        background-color: #808080;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 30px 16px;
        position: relative;
        }

        .top-left-logo {
        position: absolute;
        top: 40px;
        left: 50px;
        }

        .top-left-logo img {
        width: 160px;
        }

        .back-button {
        position: fixed;
        right: 40px;
        bottom: 40px;
        z-index: 2000;
        padding: 10px 22px;
        font-size: 18px;
        border: 2px solid #000;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        color: black;
        }

        .back-button:hover {
        background-color: #dcdcdc;
        }
        
        /* Estilos para o menu lateral de edição */
        .edit-sidebar {
			position: fixed;
			right: 20px;
			top: 120px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            padding: 20px;
            width: 250px;
            z-index:100;
            display: block !important;
        }
        
        .edit-sidebar-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        
        .edit-sidebar-steps {
            display: flex !important;
            flex-direction: column;
            gap: 15px;
        }
        
        .edit-sidebar-step {
            display: flex !important;
            align-items: center;
            padding: 12px 15px;
            border-radius: 8px;
            background-color: #f8f9fa;
            text-decoration: none;
            color: #333;
            transition: all 0.2s ease;
            border: 1px solid #ddd;
            opacity: 1 !important;
            visibility: visible !important;
        }
        
        .edit-sidebar-step:hover {
            background-color: #e9ecef;
        }
        
        .edit-sidebar-step.active {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }
        
        .edit-sidebar-icon {
            margin-right: 10px;
            font-size: 18px;
        }
        
        .edit-sidebar-text {
            font-size: 14px;
        }

        .admin-only {
            display: none;
        }

        .admin-user .admin-only {
            display: flex;
        }

        h2 {
        font-size: 30px;
        color: black;
        margin: 24px 0 16px;
        text-align: center;
        }

        .content-wrapper {
        max-width: 940px;
        width: 100%;
        }

        .table-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 12px;
        justify-content: flex-end;
        }

        .table-buttons button {
        padding: 8px 16px;
        border: 2px solid black;
        background: white;
        border-radius: 8px;
        font-size: 15px;
        cursor: pointer;
        }

        .table-buttons button:hover {
        background-color: #e0e0e0;
        }

        table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        margin-bottom: 32px;
        }

        th, td {
        padding: 10px;
        border: 1px solid #888;
        text-align: center;
        font-size: 15px;
        }

        th {
        background-color: #ccc;
        }

        tr:nth-child(even) {
        background-color: #f2f2f2;
        }

        .form-box {
        display: inline-block;
        width: 22px;
        height: 22px;
        line-height: 22px;
        text-align: center;
        border-radius: 4px;
        font-weight: bold;
        color: white;
        margin: 0 2px;
        font-size: 14px;
        }

        .form-v {
        background-color: green;
        }

        .form-e {
        background-color: yellow;
        color: black;
        }

        .form-d {
        background-color: red;
        }

        .section {
        margin-top: 30px;
        }

        .result-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        flex-wrap: wrap;
        gap: 10px;
        }

        .result-nav .left-buttons {
        display: flex;
        gap: 10px;
        flex-direction: row-reverse;
        }

        .result-nav button, .result-nav span {
        padding: 8px 16px;
        border: 2px solid black;
        background: white;
        border-radius: 8px;
        font-size: 15px;
        cursor: pointer;
        }

        .result-nav button:hover {
        background-color: #e0e0e0;
        }

        .date-navigation {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 18px;
        }

            .date-navigation button {
                padding: 6px 14px;
                border: 2px solid black;
                background: white;
                border-radius: 8px;
                cursor: pointer;
                font-size: 18px;
            }

        #selectedDateDisplay {
            font-weight: bold;
        }
        
        .jogo-realizado {
            background-color: #e8f5e9 !important;
        }
        
        .jogo-realizado td {
            font-weight: bold;
        }

        media (max-width: 768px) {
            .table-buttons, .result-nav {
                flex-direction: column;
                align-items: stretch;
            }

            .table-buttons button,
            .result-nav button {
                width: 100%;
            }
        }
    </style>
</head>
<body class="@(ViewBag.IsAdmin ? "admin-user" : "")">
    <div class="top-left-logo">
        <a href="/home">
            <img src="@Url.Content("~/img/logotipo.png")" alt="Logotipo" />
        </a>
    </div>
    
    <div class="content-wrapper">
        <!-- Tabela Classificativa -->
        <h2>Tabela Classificativa</h2>
        <div class="table-buttons">
            @if (User.Identity.IsAuthenticated)
            {
                <script>
                    // Função para obter parâmetros da URL
                    function getQueryParam(name) {
                        const params = new URLSearchParams(window.location.search);
                        return params.get(name);
                    }

                    // Guardar o ID da competição
                    const competicaoId = getQueryParam('competicaoId');
                    
                    // Salvar o ID no localStorage se existir
                    if (competicaoId) {
                        localStorage.setItem('competicaoId', competicaoId);
                    }

                    // Função para editar competição atual
                    function editarCompeticaoAtual() {
                        // Primeiro tenta obter do localStorage
                        let id = localStorage.getItem('competicaoId');
                        
                        // Se não encontrar no localStorage, tenta da URL
                        if (!id) {
                            id = getQueryParam('competicaoId');
                            if (id) {
                                localStorage.setItem('competicaoId', id);
                            }
                        }
                        
                        if (!id) {
                            alert('ID da competição não encontrado. Por favor, selecione uma competição primeiro.');
                            return;
                        }
                        
                        window.location.href = `/FormatodaCompeticao?edicao=true&competicaoId=${id}`;
                    }
                </script>

                <button type="button" class="login-button" onclick="window.location.href = `/CriarRelatorio?competicaoId=${competicaoId}`;">
                    Criar Relatório
                </button>
                <button type="button" class="login-button" onclick="editarCompeticaoAtual()">
                    Editar Competição
                </button>
            }
            <button type="button" class="login-button" onclick="consultarRelatorios()">
                Consultar Relatórios
            </button>

            <script>
                function getQueryParam(name) {
                    const params = new URLSearchParams(window.location.search);
                    return params.get(name);
                }

                function consultarRelatorios() {
                    const competicaoId = getQueryParam('competicaoId');
                    if (competicaoId) {
                        window.location.href = `/PesquisarRelatorio?competicaoId=${competicaoId}`;
                    } else {
                        window.location.href = `/PesquisarRelatorio`;
                    }
                }
            </script>
            <button type="button" class="login-button" onclick="irParaProximosJogos()">
                Jogos Agendados
            </button>
        </div>
        <table>
            <thead>
                <tr>
                    <th>Lugar</th>
                    <th>Nome</th>
                    <th>Jogos</th>
                    <th>Vitórias</th>
                    <th>Empates</th>
                    <th>Derrotas</th>
                    <th>Frames</th>
                    <th>Pontuação</th>
                    <th>Forma</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="9">Carregando dados...</td>
                </tr>
            </tbody>
        </table>

        <!-- Resultados -->
        <div class="section">
            <h2>Resultados</h2>
            <div class="table-buttons">
                <div>
                    @if (User.Identity.IsAuthenticated)
                    {
                        @if (ViewBag.IsAdmin == true)
                        {
                            <button type="button" class="login-button" onclick="window.location.href='/AtribuirCompeticao?competicaoId=' + competicaoId">
                                Atribuir Competicao
                            </button>
                        }
                        <button type="button" class="login-button" onclick="irParaPontuacoes()">
                            Alterar Resultados
                        </button>

                    }
                    <button type="button" class="login-button" onclick="window.location.href='/Historico?competicaoId=' + competicaoId">
                        Histórico
                    </button>
                        <button id="prevDayBtn">&lt;</button>
                        <span id="selectedDateDisplay"></span>
                        <button id="nextDayBtn">&gt;</button>
                </div>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Partidas</th>
                        <th>Horário</th>
                        <th>Resultado</th>
                        <th>Motivo</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="4">Carregando dados...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <a href="/Competicoes/Index" class="back-button">&lt;Voltar</a>
    <script>
        // Função para mostrar/esconder o menu lateral de edição
        function toggleEditSidebar() {
            const sidebar = document.getElementById('editSidebar');
            if (sidebar.style.display === 'none') {
                // Carregar dados da competição atual
                carregarDadosCompeticaoAtual();
                sidebar.style.display = 'block';
            } else {
                sidebar.style.display = 'none';
            }
        }
        
        // Função para carregar dados da competição atual
        function carregarDadosCompeticaoAtual() {
            const nomeCompeticao = localStorage.getItem('competicaoSelecionada');
            if (!nomeCompeticao) {
                alert('Nenhuma competição selecionada.');
                return false;
            }
            
            // Exibir o nome da competição no menu lateral
            document.getElementById('competicaoNomeDisplay').textContent = nomeCompeticao;
            
            // Buscar dados da competição no localStorage
            let competicaoId = null;
            let dadosCompeticao = null;
            
            // Procurar a competição pelo nome
            for (let i = 0; i < localStorage.length; i++) {
                const chave = localStorage.key(i);
                if (chave.startsWith('competicao_')) {
                    try {
                        const comp = JSON.parse(localStorage.getItem(chave));
                        if (comp.nome === nomeCompeticao) {
                            competicaoId = comp.id;
                            dadosCompeticao = comp;
                            break;
                        }
                    } catch (e) {
                        console.error('Erro ao processar competição:', e);
                    }
                }
            }
            
            if (!competicaoId || !dadosCompeticao) {
                // Se não encontrou pelo nome, tentar criar um ID baseado no nome
                competicaoId = nomeCompeticao.toLowerCase().replace(/[^a-z0-9]/g, '_');
                
                // Criar objeto básico da competição
                dadosCompeticao = {
                    id: competicaoId,
                    nome: nomeCompeticao,
                    tipo: 'individual' // valor padrão
                };
                
                // Salvar no localStorage para uso futuro
                localStorage.setItem(`competicao_${competicaoId}`, JSON.stringify(dadosCompeticao));
            }
            
            // Preparar dados para edição
            prepararDadosParaEdicao(competicaoId, dadosCompeticao);
            
            return true;
        }
        
        // Função para preparar dados para edição
        function prepararDadosParaEdicao(competicaoId, dadosCompeticao) {
            // Armazenar dados básicos no localStorage para edição
            localStorage.setItem('competicaoId', competicaoId);
            localStorage.setItem('nomeCompeticao', dadosCompeticao.nome);
            localStorage.setItem('tipoCompeticao', dadosCompeticao.tipo || 'individual');
            
            // Armazenar outros dados relevantes se existirem
            if (dadosCompeticao.formatosSelecionados) {
                localStorage.setItem('formatosSelecionados', JSON.stringify(dadosCompeticao.formatosSelecionados));
            }
            
            if (dadosCompeticao.criteriosPontuacao) {
                localStorage.setItem('criteriosPontuacao', JSON.stringify(dadosCompeticao.criteriosPontuacao));
            }
            
            if (dadosCompeticao.jogadoresList) {
                localStorage.setItem('jogadoresList', JSON.stringify(dadosCompeticao.jogadoresList));
            }
            
            if (dadosCompeticao.emparelhamentos) {
                localStorage.setItem('emparelhamentos', JSON.stringify(dadosCompeticao.emparelhamentos));
            }
            
            // Registrar que estamos em modo de edição
            localStorage.setItem('modoEdicao', 'true');
        }
        
        // Função para ir para uma etapa específica do processo de criação
        async function irParaEtapa(controller) {
            // Verificar se há uma competição carregada
            if (!carregarDadosCompeticaoAtual()) {
                return;
            }
            
            // Estamos em modo de edição, permitir navegação livre
            localStorage.setItem('modoEdicao', 'true');
            
            // Obter o ID da competição do localStorage
            const competicaoId = localStorage.getItem('competicaoId');
            if (!competicaoId) {
                alert('ID da competição não encontrado.');
                return;
            }
            
            // Redirecionar para a etapa selecionada, incluindo edicao e id na URL
            window.location.href = `/${controller}?edicao=true&competicaoId=${competicaoId}`;
        }

        document.addEventListener('DOMContentLoaded', function () {
            let competicaoId = @ViewBag.CompeticaoId;
            let competicaoNome = "@ViewBag.CompeticaoNome";
            const tabelaResultados = document.querySelector('.section table');
            const prevBtn = document.getElementById('prevDayBtn');
            const nextBtn = document.getElementById('nextDayBtn');
            const dateDisplay = document.getElementById('selectedDateDisplay');

            // Se não houver competicaoId na ViewBag, tenta obter do localStorage
            if (!competicaoId) {
                const storedId = localStorage.getItem('competicaoSelecionadaId');
                if (storedId && !isNaN(parseInt(storedId))) {
                    competicaoId = parseInt(storedId);
                    competicaoNome = localStorage.getItem('competicaoSelecionada') || "Competição";
                    
                    // Redirecionar para a mesma página com o ID na URL para manter a consistência
                    window.location.href = '/Menu?competicaoId=' + competicaoId;
                    return;
                } else {
                    alert('Nenhuma competição selecionada. Redirecionando para a página de competições.');
                    window.location.href = '/Competicoes';
                    return;
                }
            }
            
            // Carregar a tabela classificativa
            function carregarTabelaClassificativa() {
                const tabelaClassificativa = document.querySelector('.content-wrapper table:first-of-type');
                const tbody = tabelaClassificativa.querySelector('tbody');
                
                // Limpar a tabela existente
                tbody.innerHTML = '';
                
                // Adicionar linha de carregamento
                const loadingRow = document.createElement('tr');
                loadingRow.innerHTML = '<td colspan="9">Carregando dados...</td>';
                tbody.appendChild(loadingRow);
                
                console.log(`Carregando tabela classificativa para competição ID: ${competicaoId}`);
                
                // Buscar dados do servidor
                fetch(`/Menu/ObterTabelaClassificativa?competicaoId=${competicaoId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erro ao obter tabela classificativa: ${response.status} ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Dados da tabela classificativa recebidos:', data);
                        
                        // Limpar a tabela novamente
                        tbody.innerHTML = '';
                        
                        if (!data || data.length === 0) {
                            const row = document.createElement('tr');
                            row.innerHTML = '<td colspan="9">Nenhum dado disponível para esta competição.</td>';
                            tbody.appendChild(row);
                            return;
                        }
                        
                        // Adicionar dados reais
                        data.forEach(clube => {
                            const row = document.createElement('tr');
                            
                            // Criar células para forma
                            let formaHTML = '';
                            if (clube.forma && clube.forma.length > 0) {
                                clube.forma.forEach(f => {
                                    let classeForma = '';
                                    if (f === 'V') classeForma = 'form-v';
                                    else if (f === 'E') classeForma = 'form-e';
                                    else if (f === 'D') classeForma = 'form-d';
                                    
                                    formaHTML += `<span class="form-box ${classeForma}">${f}</span>`;
                                });
                            }
                            
                            row.innerHTML = `
                                <td>${clube.posicao}</td>
                                <td>${clube.nome}</td>
                                <td>${clube.jogos}</td>
                                <td>${clube.vitorias}</td>
                                <td>${clube.empates}</td>
                                <td>${clube.derrotas}</td>
                                <td>${clube.frames}</td>
                                <td>${clube.pontuacao}</td>
                                <td>${formaHTML}</td>
                            `;
                            
                            tbody.appendChild(row);
                        });
                    })
                    .catch(error => {
                        console.error('Erro ao carregar tabela classificativa:', error);
                        tbody.innerHTML = '';
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="9">Não foi possível carregar a tabela classificativa: ${error.message}</td>`;
                        tbody.appendChild(row);
                    });
            }
            
            // Chamar a função para carregar a tabela classificativa
            carregarTabelaClassificativa();
            
            // Atualiza o título da secção
            const h2 = document.querySelector('.section h2');
            h2.textContent = `Resultados – ${competicaoNome}`;

            // Estado de data atual
            let currentDate;
            
            // Verificar se há uma data no URL
            const urlParams = new URLSearchParams(window.location.search);
            const dataParam = urlParams.get('data');
            
            if (dataParam) {
                // Tentar converter a string para Date
                const dataParts = dataParam.split('-');
                if (dataParts.length === 3) {
                    // Formato esperado: yyyy-MM-dd
                    const year = parseInt(dataParts[0]);
                    const month = parseInt(dataParts[1]) - 1; // Mês em JavaScript é 0-11
                    const day = parseInt(dataParts[2]);
                    
                    currentDate = new Date(year, month, day);
                    console.log('Data do URL:', dataParam, 'convertida para:', currentDate);
                } else {
                    currentDate = new Date();
                }
            } else {
                currentDate = new Date();
            }

            function formatDate(date) {
                // Garantir que a data está no formato yyyy-MM-dd
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function formatDisplayDate(date) {
                return date.toLocaleDateString('pt-PT', {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric'
                });
            }

            function updateDateDisplay() {
                dateDisplay.textContent = formatDisplayDate(currentDate);
            }
            
            function carregarResultados() {
                // Limpa todas as linhas exceto o cabeçalho
                const rows = tabelaResultados.querySelectorAll('tr');
                rows.forEach((row, index) => { if (index > 0) row.remove(); });
                
                // Adicionar linha de carregamento
                const loadingRow = document.createElement('tr');
                loadingRow.innerHTML = `<td colspan="4">Carregando dados...</td>`;
                tabelaResultados.appendChild(loadingRow);
                
                // Atualizar a data exibida
                updateDateDisplay();
                
                const dataFiltrada = formatDate(currentDate);
                
                console.log(`Buscando resultados para competição ${competicaoId} na data ${dataFiltrada}`);
                
                // Buscar dados do servidor - Garantir que a data seja passada corretamente
                fetch(`/Menu/ObterResultados?competicaoId=${competicaoId}&data=${encodeURIComponent(dataFiltrada)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erro ao obter resultados: ${response.status} ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Dados de resultados recebidos:', data);
                        
                        // Limpar tabela novamente
                        const rows = tabelaResultados.querySelectorAll('tr');
                        rows.forEach((row, index) => { if (index > 0) row.remove(); });
                        
                        if (!data.emparelhamentos || data.emparelhamentos.length === 0) {
                            const row = document.createElement('tr');
                            row.innerHTML = `<td colspan="4">Nenhum jogo agendado para esta data.</td>`;
                            tabelaResultados.appendChild(row);
                            return;
                        }
                        
                        // Recarregar a tabela classificativa após carregar os resultados
                        // para garantir que a tabela esteja atualizada com os últimos resultados
                        carregarTabelaClassificativa();
                        
                        // Adicionar dados reais quando disponíveis
                        data.emparelhamentos.forEach(jogo => {
                            const row = document.createElement('tr');
                            
                            let resultado = 'Por definir';
                            if (jogo.jogoRealizado) {
                                resultado = `${jogo.pontuacaoClube1} - ${jogo.pontuacaoClube2}`;
                            }
                            
                            // Verificar o tipo de competição
                            const tipoCompeticao = localStorage.getItem('tipoCompeticao') || '';
                            const isIndividual = tipoCompeticao !== 'equipas';
                            
                            // Criar células para cada coluna
                            row.innerHTML = `
                                <td>${jogo.clube1} vs ${jogo.clube2}</td>
                                <td>${jogo.horario}</td>
                                <td>${resultado}</td>
                                <td>${jogo.motivo !== undefined ? jogo.motivo : ''}</td>
                            `;
                            
                            // Adicionar classe para destacar jogos realizados
                            if (jogo.jogoRealizado) {
                                row.classList.add('jogo-realizado');
                            }
                            
                            // Adicionar classe para diferenciar jogos individuais
                            if (isIndividual) {
                                row.classList.add('jogo-individual');
                            }
                            
                            tabelaResultados.appendChild(row);
                        });
                        
                        // Adicionar informações de depuração
                        console.log(`Total de emparelhamentos na competição: ${data.totalEmparelhamentos}`);
                        console.log(`Emparelhamentos para a data ${data.dataFormatada}: ${data.emparelhamentos.length}`);
                    })
                    .catch(error => {
                        console.error('Erro:', error);
                        // Limpar tabela novamente
                        const rows = tabelaResultados.querySelectorAll('tr');
                        rows.forEach((row, index) => { if (index > 0) row.remove(); });
                        
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="4">Não foi possível carregar os resultados. Por favor, tente novamente mais tarde.</td>`;
                        tabelaResultados.appendChild(row);
                        
                        // Registrar o erro no console para depuração
                        console.error('Detalhes do erro:', error);
                    });
            }

            // Botões para navegar entre dias
            prevBtn.addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() - 1);
                updateDateDisplay();
                carregarResultados();
            });

            nextBtn.addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() + 1);
                updateDateDisplay();
                carregarResultados();
            });

            // Função para ir para a página de pontuações
            window.irParaPontuacoes = function() {
                const dataFormatada = formatDate(currentDate);
                console.log('Indo para pontuações com data:', dataFormatada);
                
                // Armazenar o ID da competição no localStorage para persistência
                localStorage.setItem('competicaoSelecionadaId', competicaoId);
                
                // Armazenar a data selecionada para persistência
                localStorage.setItem('dataSelecionada', dataFormatada);
                
                // Redirecionar para a página de pontuações com a data no URL
                window.location.href = `/Pontuacoes?competicaoId=${competicaoId}&data=${encodeURIComponent(dataFormatada)}`;
            };
            


            // Inicialização
            updateDateDisplay();
            
            // Primeiro carrega a tabela classificativa
            carregarTabelaClassificativa();
            
            // Depois carrega os resultados
            carregarResultados();
        });
    </script>
    <!-- Modal para motivo de vitória -->
    <div id="motivoModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:1000; align-items:center; justify-content:center;">
        <div style="background:white; padding:32px; border-radius:12px; max-width:400px; margin:120px auto; position:relative;">
            <h3>Motivo da Vitória</h3>
            <input type="hidden" id="motivoInputIdx" />
            <input type="hidden" id="motivoModalVencedor" />
            <input type="hidden" id="motivoModalJ1" />
            <input type="hidden" id="motivoModalJ2" />
            <textarea id="motivoVitoria" style="width:100%; min-height:60px; margin-top:12px; font-size:16px; border-radius:8px; border:1px solid #333;" placeholder="Descreva o motivo..."></textarea>
            <div style="margin-top:18px; text-align:right;">
                <button onclick="confirmarMotivo()" class="btn">Confirmar</button>
                <button onclick="cancelarMotivo()" class="btn" style="margin-left:10px;">Cancelar</button>
            </div>
        </div>
    </div>
    

<script>
function irParaProximosJogos() {
    // Tenta obter o ID salvo da competição
    const competicaoId = localStorage.getItem('competicaoId') || localStorage.getItem('competicaoSelecionadaId');
    if (competicaoId) {
        window.location.href = `/ProximosJogos?competicaoId=${competicaoId}`;
    } else {
        alert('Nenhuma competição selecionada.');
    }
}
</script>
</body>
</html>
