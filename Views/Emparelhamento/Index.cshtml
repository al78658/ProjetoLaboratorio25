﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Emparelhamento</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        h1 {
            font-size: 36px;
            color: black;
            margin-bottom: 10px;
            text-align: center;
        }

        #nomeCompeticao {
            font-size: 22px;
            color: white;
            margin-bottom: 30px;
            text-align: center;
        }

        .table-wrapper {
            width: 100%;
            display: flex;
            justify-content: center;
        }

        table {
            border-collapse: collapse;
            background-color: white;
            width: 60%;
            min-width: 600px;
        }

        th, td {
            border: 1px solid black;
            padding: 14px;
            text-align: center;
            font-size: 18px;
        }

        th {
            background-color: #e0e0e0;
            font-weight: bold;
        }

        input[type="date"],
        input[type="time"] {
            padding: 6px;
            font-size: 16px;
            width: 90%;
        }

        .save-container {
            margin-top: 30px;
            text-align: center;
        }

        .save-button {
            padding: 12px 28px;
            font-size: 18px;
            border: 2px solid black;
            background: white;
            border-radius: 8px;
            cursor: pointer;
        }

            .save-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 700px) {
            table

        {
            width: 90%;
            min-width: unset;
        }

        .save-button {
            width: 100%;
        }

        h1 {
            font-size: 28px;
        }

        }
    </style>
</head>
<body>
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Navegação de Criação de Competição -->
    @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Emparelhamento", edicao = false })

    <h1>Emparelhamento</h1>
    <h2 id="nomeCompeticao"></h2>

    <div class="table-wrapper">
        <table>
            <thead>
                <tr>
                    <th>Equipa 1</th>
                    <th>Data e Horário</th>
                    <th>Equipa 2</th>
                </tr>
            </thead>
            <tbody id="pairsTableBody"></tbody>
        </table>
    </div>

    <div class="save-container">
        <button class="save-button" id="saveButton">Guardar</button>
    </div>

    <a href="/ListadeJogadores" class="back-button">&lt;Voltar</a>

    <script>
        // Capturar o ID da competição do ViewBag (se disponível)
        @if (ViewBag.CompeticaoIdJS != null)
        {
            <text>
            const competicaoIdFromServer = @ViewBag.CompeticaoIdJS;
            // Armazenar no localStorage para uso posterior
            localStorage.setItem('competicaoId', competicaoIdFromServer);
            </text>
        }
        
        document.addEventListener('DOMContentLoaded', function () {
            const pairsTableBody = document.getElementById('pairsTableBody');
            const saveButton = document.getElementById('saveButton');
            const titulo = document.getElementById('nomeCompeticao');
            
            // Mover a declaração do nomeCompeticao para cá e garantir que está inicializado
            let nomeCompeticao = localStorage.getItem('nomeCompeticao');
            if (!nomeCompeticao || nomeCompeticao.trim() === '') {
                nomeCompeticao = 'Competicao_' + new Date().toISOString().slice(0, 10);
                localStorage.setItem('nomeCompeticao', nomeCompeticao);
            }

            // Mostrar o nome da competição no título
            titulo.textContent = nomeCompeticao ? `Competição: ${nomeCompeticao}` : 'Emparelhamento';
            
            // Obtem jogadores do localStorage - apenas se estivermos no mesmo processo de criação
            let jogadores = [];
            
            // Verificar se estamos em um processo de criação de competição
            const nomeCompeticaoExistente = localStorage.getItem('nomeCompeticao');
            
            if (nomeCompeticaoExistente) {
                // Primeiro tenta jogadoresParaEmparelhar (enviados da página anterior)
                jogadores = JSON.parse(localStorage.getItem('jogadoresParaEmparelhar')) || [];
                
                // Se não tiver jogadores do emparelhamento, tenta usar a lista específica desta competição
                if (jogadores.length === 0) {
                    const jogadoresKey = `jogadoresList_${nomeCompeticaoExistente}`;
                    jogadores = JSON.parse(localStorage.getItem(jogadoresKey)) || [];
                    
                    // Se ainda não tiver, tenta a lista geral (para compatibilidade)
                    if (jogadores.length === 0) {
                        jogadores = JSON.parse(localStorage.getItem('jogadoresList')) || [];
                    }
                }
                
                // Atualizar o título com base no tipo de competição
                const tipoCompeticao = localStorage.getItem('tipoCompeticao') || '';
                const h1Title = document.querySelector('h1');
                
                if (tipoCompeticao === 'equipas') {
                    h1Title.textContent = 'Emparelhamento de Equipas';
                    document.title = 'Emparelhamento de Equipas';
                } else {
                    h1Title.textContent = 'Emparelhamento';
                    document.title = 'Emparelhamento';
                }
            }

            if (jogadores.length < 2) {
                alert("Erro: Nenhuma lista de jogadores disponível.");
                return;
            }

            // Verificar o tipo de competição
            const tipoCompeticao = localStorage.getItem('tipoCompeticao') || '';
            
            if (tipoCompeticao === 'equipas') {
                // Lógica existente para competições por equipes
                // Agrupar jogadores por clube
                const clubes = {};
                jogadores.forEach(jogador => {
                    const clube = typeof jogador === 'object' ? jogador.clube : '';
                    if (!clube) return;
                    
                    if (!clubes[clube]) {
                        clubes[clube] = [];
                    }
                    clubes[clube].push(jogador);
                });

                // Converter objeto de clubes em array
                const clubesArray = Object.keys(clubes).map(clube => ({
                    nome: clube,
                    jogadores: clubes[clube]
                }));

                // Dividir clubes em dois lados
                const meio = Math.ceil(clubesArray.length / 2);
                const clubesEsquerdo = clubesArray.slice(0, meio);
                const clubesDireito = clubesArray.slice(meio);

                // Criar arrays de jogadores representando os clubes
                const ladoEsquerdo = clubesEsquerdo.map(clube => ({
                    nome: clube.nome,
                    jogadores: clube.jogadores,
                    isClube: true
                }));
                
                const ladoDireito = clubesDireito.map(clube => ({
                    nome: clube.nome,
                    jogadores: clube.jogadores,
                    isClube: true
                }));

                for (let i = 0; i < Math.max(ladoEsquerdo.length, ladoDireito.length); i++) {
                    const clube1 = ladoEsquerdo[i] || '';
                    const clube2 = ladoDireito[i] || '';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${clube1 ? clube1.nome : ''}</td>
                        <td>
                            <input type="date" class="date-input" required>
                            <input type="time" class="time-input" required>
                        </td>
                        <td>${clube2 ? clube2.nome : ''}</td>
                    `;
                    pairsTableBody.appendChild(row);
                }
            } else {
                // Lógica para competições individuais
                // Dividir jogadores em dois lados
                const meio = Math.ceil(jogadores.length / 2);
                const jogadoresEsquerdo = jogadores.slice(0, meio);
                const jogadoresDireito = jogadores.slice(meio);

                for (let i = 0; i < Math.max(jogadoresEsquerdo.length, jogadoresDireito.length); i++) {
                    const jogador1 = jogadoresEsquerdo[i] || '';
                    const jogador2 = jogadoresDireito[i] || '';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${jogador1 ? (typeof jogador1 === 'object' ? jogador1.nome : jogador1) : ''}</td>
                        <td>
                            <input type="date" class="date-input" required>
                            <input type="time" class="time-input" required>
                        </td>
                        <td>${jogador2 ? (typeof jogador2 === 'object' ? jogador2.nome : jogador2) : ''}</td>
                    `;
                    pairsTableBody.appendChild(row);
                }
            }

            // Botão de salvar
            saveButton.addEventListener('click', function () {
                const rows = pairsTableBody.querySelectorAll('tr');
                const agendamentos = [];

                rows.forEach(row => {
                    const cells = row.querySelectorAll('td');
                    const dateInput = cells[1].querySelector('.date-input');
                    const timeInput = cells[1].querySelector('.time-input');

                    if (cells[0].textContent && cells[2].textContent && dateInput.value && timeInput.value) {
                        agendamentos.push({
                            jogador1: { nome: cells[0].textContent.trim() },
                            jogador2: { nome: cells[2].textContent.trim() },
                            data: dateInput.value,
                            hora: timeInput.value,
                            isClube: tipoCompeticao === 'equipas'
                        });
                    }
                });

                if (agendamentos.length === 0) {
                    alert('Por favor, preencha todas as datas e horários antes de salvar.');
                    return;
                }

                // Salvar os agendamentos no localStorage
                const agendamentosKey = `agendamentos_${nomeCompeticao}`;
                localStorage.setItem(agendamentosKey, JSON.stringify(agendamentos));
                
                const timestamp = new Date().toISOString();
                // Use the existing competicaoId from localStorage or generate a new one
                let competicaoId = parseInt(localStorage.getItem('competicaoId')) || 0;
                if (!competicaoId) {
                    competicaoId = nomeCompeticao.toLowerCase().replace(/[^a-z0-9]/g, '_');
                }

                // Guarda todos os dados
                localStorage.setItem(`jogadores_${nomeCompeticao}`, JSON.stringify(jogadores));

                // Regista na lista geral de competições
                const todas = JSON.parse(localStorage.getItem('todasCompeticoes')) || [];
                // Verificar se já existe esta competição na lista
                const existeIndex = todas.findIndex(c => c.nome === nomeCompeticao);
                if (existeIndex >= 0) {
                    todas[existeIndex].dataCriacao = timestamp;
                } else {
                    todas.push({ nome: nomeCompeticao, id: competicaoId, dataCriacao: timestamp });
                }
                localStorage.setItem('todasCompeticoes', JSON.stringify(todas));

                // Limpa o temporário
                localStorage.removeItem('jogadoresParaEmparelhar');

                // Preparar dados para enviar ao servidor
                const emparelhamentosParaEnviar = [];
                
                agendamentos.forEach(agendamento => {
                    // Verificar se os objetos têm a estrutura esperada
                    const clube1 = agendamento.jogador1 && typeof agendamento.jogador1 === 'object' ? 
                                  (agendamento.jogador1.nome || '') : '';
                    const clube2 = agendamento.jogador2 && typeof agendamento.jogador2 === 'object' ? 
                                  (agendamento.jogador2.nome || '') : '';
                    
                    if (clube1 && clube2) {
                        emparelhamentosParaEnviar.push({
                            clube1: clube1,
                            clube2: clube2,
                            dataJogo: agendamento.data,
                            horaJogo: agendamento.hora,
                            isClube: agendamento.isClube
                        });
                    }
                });
                
                // Obter o ID da competição (se disponível)
                // Tenta várias fontes possíveis para o ID da competição
                if (!competicaoId) {
                    // Tenta obter da URL se estiver disponível
                    const urlParams = new URLSearchParams(window.location.search);
                    competicaoId = parseInt(urlParams.get('competicaoId')) || 0;
                }
                
                // Log para depuração
                console.log('Dados a enviar:', {
                    competicaoId: competicaoId,
                    nomeCompeticao: nomeCompeticao,
                    emparelhamentos: emparelhamentosParaEnviar
                });
                
                // Enviar dados para o servidor
                fetch('/Emparelhamento/SalvarEmparelhamentos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        competicaoId: competicaoId,
                        nomeCompeticao: nomeCompeticao,
                        emparelhamentos: emparelhamentosParaEnviar
                    })
                })
                .then(response => {
                  // Sempre tenta obter o JSON da resposta, mesmo em caso de erro
                      return response.json().then(data => {
                        // Adiciona o status à resposta para verificação posterior
                        return { status: response.status, data };
                    });
                })
                .then(result => {
                    console.log('Resposta do servidor:', result);
                    
                    // Verifica se a resposta foi bem-sucedida (200 OK ou 207 Multi-Status)
                    if (result.status === 200 || result.status === 207) {
                        // Vai para o menu da competição específica
                        localStorage.setItem('competicaoSelecionada', nomeCompeticao);
                        
                        // Se houver uma mensagem na resposta, mostra-a
                        if (result.data && result.data.mensagem) {
                            alert(result.data.mensagem);
                        } else {
                            alert('Emparelhamentos salvos com sucesso!');
                        }
                        
                        // Armazenar o ID da competição para uso no Menu
                        localStorage.setItem('competicaoSelecionadaId', competicaoId);
                        window.location.href = '/Menu?competicaoId=' + competicaoId;
                    } else {
                        // Se houver erro, mostra a mensagem de erro
                        const mensagemErro = result.data && result.data.mensagem 
                            ? result.data.mensagem 
                            : 'Erro ao salvar emparelhamentos';
                            
                        throw new Error(mensagemErro);
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('Erro ao salvar emparelhamentos: ' + error.message);
                    
                    // Mesmo com erro, salva localmente e continua para o menu
                    localStorage.setItem('competicaoSelecionada', nomeCompeticao);
                    localStorage.setItem('competicaoSelecionadaId', competicaoId);
                    window.location.href = '/Menu?competicaoId=' + competicaoId;
                });
            });
        });
    </script>
</body>
</html>
