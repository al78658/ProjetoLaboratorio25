﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Emparelhamento</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        h1 {
            font-size: 36px;
            color: black;
            margin-bottom: 10px;
            text-align: center;
        }

        #nomeCompeticao {
            font-size: 22px;
            color: white;
            margin-bottom: 30px;
            text-align: center;
        }

        .table-wrapper {
            width: 100%;
            display: flex;
            justify-content: center;
        }

        table {
            border-collapse: collapse;
            background-color: white;
            width: 60%;
            min-width: 600px;
        }

        th, td {
            border: 1px solid black;
            padding: 14px;
            text-align: center;
            font-size: 18px;
        }

        th {
            background-color: #e0e0e0;
            font-weight: bold;
        }

        input[type="date"],
        input[type="time"] {
            padding: 6px;
            font-size: 16px;
            width: 90%;
        }

        .save-container {
            margin-top: 30px;
            text-align: center;
        }

        .save-button {
            padding: 12px 28px;
            font-size: 18px;
            border: 2px solid black;
            background: white;
            border-radius: 8px;
            cursor: pointer;
        }

            .save-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 700px) {
            table

        {
            width: 90%;
            min-width: unset;
        }

        .save-button {
            width: 100%;
        }

        h1 {
            font-size: 28px;
        }

        }
    </style>
</head>
<body>
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Navegação de Criação de Competição -->
    @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Emparelhamento", edicao = false })

    <h1>Emparelhamento</h1>
    <h2 id="nomeCompeticao"></h2>

    <div class="table-wrapper">
        <table>
            <thead>
                <tr>
                    <th>Equipa 1</th>
                    <th>Data e Horário</th>
                    <th>Equipa 2</th>
                </tr>
            </thead>
            <tbody id="pairsTableBody"></tbody>
        </table>
    </div>

    <div class="save-container">
        <button class="save-button" id="saveButton">Guardar</button>
    </div>

    <a href="/ListadeJogadores" class="back-button">&lt;Voltar</a>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const pairsTableBody = document.getElementById('pairsTableBody');
            const saveButton = document.getElementById('saveButton');
            const titulo = document.getElementById('nomeCompeticao');

            // Verificar se estamos em um processo de criação de competição
            const nomeCompeticao = localStorage.getItem('nomeCompeticao');
            
            // Obtem jogadores do localStorage - apenas se estivermos no mesmo processo de criação
            let jogadores = [];
            
            if (nomeCompeticao) {
                // Primeiro tenta jogadoresParaEmparelhar (enviados da página anterior)
                jogadores = JSON.parse(localStorage.getItem('jogadoresParaEmparelhar')) || [];
                
                // Se não tiver jogadores do emparelhamento, tenta usar a lista de jogadores
                if (jogadores.length === 0) {
                    jogadores = JSON.parse(localStorage.getItem('jogadoresList')) || [];
                }
            }

            if (jogadores.length < 2) {
                alert("Erro: Nenhuma lista de jogadores disponível.");
                return;
            }

            // Mostrar o nome da competição no título
            if (nomeCompeticao) {
                titulo.textContent = `Competição: ${nomeCompeticao}`;
            } else {
                titulo.textContent = `Emparelhamento`;
            }

            // Agrupar jogadores por clube
            const clubes = {};
            jogadores.forEach(jogador => {
                const clube = typeof jogador === 'object' ? jogador.clube : '';
                if (!clube) return;
                
                if (!clubes[clube]) {
                    clubes[clube] = [];
                }
                clubes[clube].push(jogador);
            });

            // Converter objeto de clubes em array
            const clubesArray = Object.keys(clubes).map(clube => ({
                nome: clube,
                jogadores: clubes[clube]
            }));

            // Dividir clubes em dois lados
            const meio = Math.ceil(clubesArray.length / 2);
            const clubesEsquerdo = clubesArray.slice(0, meio);
            const clubesDireito = clubesArray.slice(meio);

            // Criar arrays de jogadores representando os clubes
            const ladoEsquerdo = clubesEsquerdo.map(clube => ({
                nome: clube.nome,
                jogadores: clube.jogadores,
                isClube: true
            }));
            
            const ladoDireito = clubesDireito.map(clube => ({
                nome: clube.nome,
                jogadores: clube.jogadores,
                isClube: true
            }));

            for (let i = 0; i < Math.max(ladoEsquerdo.length, ladoDireito.length); i++) {
                const clube1 = ladoEsquerdo[i] || '';
                const clube2 = ladoDireito[i] || '';

                const row = document.createElement('tr');
                
                // Obter o nome do clube
                const nome1 = clube1 ? clube1.nome : '';
                const nome2 = clube2 ? clube2.nome : '';
                
                row.innerHTML = `
                    <td>${nome1}</td>
                    <td>
                        <input type="date" class="data-input" data-index1="${i}" data-index2="${i}">
                        <input type="time" class="hora-input" data-index1="${i}" data-index2="${i}">
                    </td>
                    <td>${nome2}</td>
                `;
                pairsTableBody.appendChild(row);
            }

            saveButton.addEventListener('click', function () {
                const dataInputs = document.querySelectorAll('.data-input');
                const horaInputs = document.querySelectorAll('.hora-input');
                const agendamentos = [];

                dataInputs.forEach((dataInput, index) => {
                    const horaInput = horaInputs[index];
                    const data = dataInput.value;
                    const hora = horaInput.value;
                    const index1 = parseInt(dataInput.dataset.index1);
                    const index2 = parseInt(dataInput.dataset.index2);
                    
                    const clube1 = ladoEsquerdo[index1];
                    const clube2 = ladoDireito[index2];

                    if (data && hora && clube1 && clube2) {
                        agendamentos.push({ 
                            jogador1: clube1, 
                            jogador2: clube2, 
                            data, 
                            hora,
                            isClube: true
                        });
                    }
                });

                // Obter o nome da competição do localStorage ou criar um nome padrão
                let nomeCompeticao = localStorage.getItem('nomeCompeticao');
                if (!nomeCompeticao || nomeCompeticao.trim() === '') {
                    nomeCompeticao = 'Competicao_' + new Date().toISOString().slice(0, 10);
                }
                
                const timestamp = new Date().toISOString();
                const competicaoId = localStorage.getItem('competicaoId') || nomeCompeticao.toLowerCase().replace(/[^a-z0-9]/g, '_');

                // Guarda todos os dados
                localStorage.setItem(`jogadores_${nomeCompeticao}`, JSON.stringify(jogadores));
                localStorage.setItem(`agendamentos_${nomeCompeticao}`, JSON.stringify(agendamentos));
                
                // Salvar dados da competição completa
                const dadosCompeticao = {
                    id: competicaoId,
                    nome: nomeCompeticao,
                    tipo: localStorage.getItem('tipoCompeticao') || 'individual',
                    formatosSelecionados: JSON.parse(localStorage.getItem('formatosSelecionados') || '{}'),
                    jogadoresList: jogadores,
                    emparelhamentos: agendamentos,
                    dataCriacao: timestamp
                };
                
                // Salvar no localStorage
                localStorage.setItem(`competicao_${competicaoId}`, JSON.stringify(dadosCompeticao));

                // Regista na lista geral de competições
                const todas = JSON.parse(localStorage.getItem('todasCompeticoes')) || [];
                // Verificar se já existe esta competição na lista
                const existeIndex = todas.findIndex(c => c.nome === nomeCompeticao);
                if (existeIndex >= 0) {
                    todas[existeIndex].dataCriacao = timestamp;
                } else {
                    todas.push({ nome: nomeCompeticao, id: competicaoId, dataCriacao: timestamp });
                }
                localStorage.setItem('todasCompeticoes', JSON.stringify(todas));

                // Limpa o temporário
                localStorage.removeItem('jogadoresParaEmparelhar');

                // Vai para o menu da competição específica
                localStorage.setItem('competicaoSelecionada', nomeCompeticao);
                alert('Emparelhamentos salvos com sucesso!');
                window.location.href = '/Menu';
            });
        });
    </script>
</body>
</html>
