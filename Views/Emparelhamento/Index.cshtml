﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Emparelhamento</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        h1 {
            font-size: 36px;
            color: black;
            margin-bottom: 10px;
            text-align: center;
        }

        #nomeCompeticao {
            font-size: 22px;
            color: white;
            margin-bottom: 30px;
            text-align: center;
        }

        .table-wrapper {
            width: 100%;
            display: flex;
            justify-content: center;
        }

        table {
            border-collapse: collapse;
            background-color: white;
            width: 60%;
            min-width: 600px;
        }

        th, td {
            border: 1px solid black;
            padding: 14px;
            text-align: center;
            font-size: 18px;
        }

        th {
            background-color: #e0e0e0;
            font-weight: bold;
        }

        input[type="date"],
        input[type="time"] {
            padding: 6px;
            font-size: 16px;
            width: 90%;
        }

        .save-container {
            margin-top: 30px;
            text-align: center;
        }

        .save-button {
            padding: 12px 28px;
            font-size: 18px;
            border: 2px solid black;
            background: white;
            border-radius: 8px;
            cursor: pointer;
        }

            .save-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 700px) {
            table

        {
            width: 90%;
            min-width: unset;
        }

        .save-button {
            width: 100%;
        }

        h1 {
            font-size: 28px;
        }

        }
    </style>
</head>
<body>
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Navegação de Criação de Competição -->
    @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Emparelhamento", edicao = false })

    <h1>Emparelhamento</h1>
    <h2 id="nomeCompeticao"></h2>

    <div class="table-wrapper">
        <table>
            <thead>
                <tr>
                    <th>Equipa 1</th>
                    <th>Data e Horário</th>
                    <th>Equipa 2</th>
                </tr>
            </thead>
            <tbody id="pairsTableBody"></tbody>
        </table>
    </div>

    <div class="save-container">
        <button class="save-button" id="saveButton">Guardar</button>
    </div>

    <a href="/ListadeJogadores" class="back-button">&lt;Voltar</a>

    <script>
        // Função de inicialização
        function initializeEmparelhamento() {
            // Inicialização
            const titulo = document.getElementById('nomeCompeticao');
            const pairsTableBody = document.getElementById('pairsTableBody');
            const saveButton = document.getElementById('saveButton');
            const nomeCompeticao = "@ViewBag.CompeticaoNome";
            const competicaoId = @ViewBag.CompeticaoId;
            const isFaseEliminatoria = @(ViewBag.IsFaseEliminatoria ? "true" : "false");
            const tipoCompeticao = "@ViewBag.TipoCompeticao";
            
            // Verificar se os elementos foram encontrados
            if (!titulo || !pairsTableBody || !saveButton) {
                console.error('Elementos não encontrados:', {
                    titulo: !!titulo,
                    pairsTableBody: !!pairsTableBody,
                    saveButton: !!saveButton
                });
                return;
            }
            
            // Mostrar o nome da competição no título
            titulo.textContent = nomeCompeticao ? `Competição: ${nomeCompeticao}` : 'Emparelhamento';
            
            // Obtem jogadores/clubes do ViewBag
            let jogadores = [];
            
            // Se for fase eliminatória, usar os vencedores passados pelo controller
            if (isFaseEliminatoria) {
                jogadores = @Html.Raw(Json.Serialize(ViewBag.Vencedores ?? new string[] {}));
            } else {
                if (tipoCompeticao === 'equipas') {
                    // Para competições de equipes, usar os clubes
                    jogadores = @Html.Raw(Json.Serialize(ViewBag.Clubes ?? new string[] {}))
                        .map(clube => ({ nome: clube }));
                } else {
                    // Para competições individuais, usar os jogadores
                    jogadores = @Html.Raw(Json.Serialize(ViewBag.Jogadores ?? new object[] {}));
                }
            }
            
            // Atualizar o título com base no tipo de competição
            const h1Title = document.querySelector('h1');
            
            if (tipoCompeticao === 'equipas') {
                h1Title.textContent = 'Emparelhamento de Equipas';
                document.title = 'Emparelhamento de Equipas';
            } else {
                h1Title.textContent = 'Emparelhamento';
                document.title = 'Emparelhamento';
            }

            // Limpar a tabela
            pairsTableBody.innerHTML = '';

            // Se for fase eliminatória, emparelhar os vencedores
            if (isFaseEliminatoria) {
                // Dividir os vencedores em pares
                for (let i = 0; i < jogadores.length; i += 2) {
                    const clube1 = jogadores[i];
                    const clube2 = i + 1 < jogadores.length ? jogadores[i + 1] : '';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${clube1}</td>
                        <td>
                            <input type="date" class="date-input" required>
                            <input type="time" class="time-input" required>
                        </td>
                        <td>${clube2}</td>
                    `;
                    pairsTableBody.appendChild(row);
                }
            } else {
                // Lógica existente para emparelhamento normal
                if (tipoCompeticao === 'equipas') {
                    // Lógica para competições de equipes
                    const meio = Math.ceil(jogadores.length / 2);
                    const ladoEsquerdo = jogadores.slice(0, meio);
                    const ladoDireito = jogadores.slice(meio);

                    for (let i = 0; i < Math.max(ladoEsquerdo.length, ladoDireito.length); i++) {
                        const clube1 = ladoEsquerdo[i] || '';
                        const clube2 = ladoDireito[i] || '';

                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${clube1 ? clube1.nome : ''}</td>
                            <td>
                                <input type="date" class="date-input" required>
                                <input type="time" class="time-input" required>
                            </td>
                            <td>${clube2 ? clube2.nome : ''}</td>
                        `;
                        pairsTableBody.appendChild(row);
                    }
                } else {
                    // Lógica para competições individuais
                    // Dividir jogadores em dois lados
                    const meio = Math.ceil(jogadores.length / 2);
                    const jogadoresEsquerdo = jogadores.slice(0, meio);
                    const jogadoresDireito = jogadores.slice(meio);

                    for (let i = 0; i < Math.max(jogadoresEsquerdo.length, jogadoresDireito.length); i++) {
                        const jogador1 = jogadoresEsquerdo[i] || '';
                        const jogador2 = jogadoresDireito[i] || '';

                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${jogador1 ? jogador1.nome : ''}</td>
                            <td>
                                <input type="date" class="date-input" required>
                                <input type="time" class="time-input" required>
                            </td>
                            <td>${jogador2 ? jogador2.nome : ''}</td>
                        `;
                        pairsTableBody.appendChild(row);
                    }
                }
            }

            // Salvar emparelhamentos
            saveButton.addEventListener('click', async () => {
                const rows = pairsTableBody.querySelectorAll('tr');
                const agendamentos = [];
                let hasError = false;

                rows.forEach(row => {
                    const clube1 = row.cells[0].textContent.trim();
                    const clube2 = row.cells[2].textContent.trim();
                    const dataInput = row.cells[1].querySelector('.date-input');
                    const horaInput = row.cells[1].querySelector('.time-input');

                    if (!dataInput.value || !horaInput.value) {
                        alert('Por favor, preencha a data e hora para todos os jogos.');
                        hasError = true;
                        return;
                    }

                    if (clube1 && clube2) {
                        agendamentos.push({
                            jogador1: { nome: clube1 },
                            jogador2: { nome: clube2 },
                            data: dataInput.value,
                            hora: horaInput.value,
                            isClube: true
                        });
                    }
                });

                if (hasError) return;

                // Preparar timestamp para o nome da competição
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');

                // Regista na lista geral de competições
                const todas = JSON.parse(localStorage.getItem('todasCompeticoes')) || [];
                // Verificar se já existe esta competição na lista
                const existeIndex = todas.findIndex(c => c.nome === nomeCompeticao);
                if (existeIndex >= 0) {
                    todas[existeIndex].dataCriacao = timestamp;
                } else {
                    todas.push({ nome: nomeCompeticao, id: competicaoId, dataCriacao: timestamp });
                }
                localStorage.setItem('todasCompeticoes', JSON.stringify(todas));

                // Limpa o temporário
                localStorage.removeItem('jogadoresParaEmparelhar');

                // Preparar dados para enviar ao servidor
                const emparelhamentosParaEnviar = [];
                
                agendamentos.forEach(agendamento => {
                    // Verificar se os objetos têm a estrutura esperada
                    const clube1 = agendamento.jogador1 && typeof agendamento.jogador1 === 'object' ? 
                                (agendamento.jogador1.nome || '') : '';
                    const clube2 = agendamento.jogador2 && typeof agendamento.jogador2 === 'object' ? 
                                (agendamento.jogador2.nome || '') : '';
                    
                    if (clube1 && clube2) {
                        emparelhamentosParaEnviar.push({
                            clube1: clube1,
                            clube2: clube2,
                            dataJogo: agendamento.data,
                            horaJogo: agendamento.hora,
                            isClube: agendamento.isClube
                        });
                    }
                });
                
                // Log para depuração
                console.log('Dados a enviar:', {
                    competicaoId: competicaoId,
                    nomeCompeticao: nomeCompeticao,
                    emparelhamentos: emparelhamentosParaEnviar
                });
                
                // Enviar dados para o servidor
                fetch('/Emparelhamento/SalvarEmparelhamentos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        competicaoId: competicaoId,
                        nomeCompeticao: nomeCompeticao,
                        emparelhamentos: emparelhamentosParaEnviar
                    })
                })
                .then(response => {
                    // Sempre tenta obter o JSON da resposta, mesmo em caso de erro
                    return response.json().then(data => {
                        // Adiciona o status à resposta para verificação posterior
                        return { status: response.status, data };
                    });
                })
                .then(result => {
                    if (result.status === 200) {
                        alert('Emparelhamentos salvos com sucesso!');
                        
                        // Armazenar o ID da competição e redirecionar
                        localStorage.setItem('competicaoSelecionadaId', competicaoId);
                        window.location.href = '/Menu?competicaoId=' + competicaoId;
                    } else {
                        // Se houver falhas parciais (status 207) ou outros erros
                        let mensagem = result.data.mensagem || 'Erro ao salvar emparelhamentos.';
                        
                        if (result.data.falhas && result.data.falhas.length > 0) {
                            mensagem += '\n\nFalhas:\n' + result.data.falhas
                                .map(f => `${f.clube1} vs ${f.clube2}`)
                                .join('\n');
                        }
                        
                        if (result.data.sucessos && result.data.sucessos.length > 0) {
                            mensagem += '\n\nSucessos:\n' + result.data.sucessos.join('\n');
                        }
                        
                        alert(mensagem);
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('Erro ao salvar emparelhamentos: ' + error.message);
                });
            });
        }

        // Chamar a função de inicialização quando o documento estiver pronto
        document.addEventListener('DOMContentLoaded', initializeEmparelhamento);
    </script>
</body>
</html>
