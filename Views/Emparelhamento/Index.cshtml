@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <title>Emparelhamento</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #808080;
            min-height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .top-left-logo {
            position: absolute;
            top: 40px;
            left: 50px;
        }

            .top-left-logo img {
                width: 160px;
            }

        h1 {
            font-size: 36px;
            color: black;
            margin-bottom: 10px;
            text-align: center;
        }

        #nomeCompeticao {
            font-size: 22px;
            color: white;
            margin-bottom: 30px;
            text-align: center;
        }

        .table-wrapper {
            width: 100%;
            display: flex;
            justify-content: center;
        }

        table {
            border-collapse: collapse;
            background-color: white;
            width: 60%;
            min-width: 600px;
        }

        th, td {
            border: 1px solid black;
            padding: 14px;
            text-align: center;
            font-size: 18px;
        }

        th {
            background-color: #e0e0e0;
            font-weight: bold;
        }

        input[type="date"],
        input[type="time"] {
            padding: 6px;
            font-size: 16px;
            width: 90%;
        }

        .save-container {
            margin-top: 30px;
            text-align: center;
        }

        .save-button {
            padding: 12px 28px;
            font-size: 18px;
            border: 2px solid black;
            background: white;
            border-radius: 8px;
            cursor: pointer;
        }

            .save-button:hover {
                background-color: #dcdcdc;
            }

        .back-button {
            position: absolute;
            right: 30px;
            bottom: 30px;
            padding: 10px 20px;
            font-size: 18px;
            border: 2px solid #000;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

            .back-button:hover {
                background-color: #dcdcdc;
            }

        media (max-width: 700px) {
            table

        {
            width: 90%;
            min-width: unset;
        }

        .save-button {
            width: 100%;
        }

        h1 {
            font-size: 28px;
        }

        }
    </style>
</head>
<body>
    <div class="top-left-logo">
        <a href="/Home">
            <img src="img/logotipo.png" alt="Logotipo" />
        </a>
    </div>

    <!-- Navegação de Criação de Competição -->
    @await Html.PartialAsync("_CriacaoCompeticaoNav", new { etapaAtual = "Emparelhamento", edicao = false })

    <h1>Emparelhamento</h1>
    <h2 id="nomeCompeticao"></h2>

    <!-- Tabela de novos emparelhamentos -->
    <div class="table-wrapper">
        <table>
            <thead>
                <tr>
                    <th>Equipa 1</th>
                    <th>Data e Horário</th>
                    <th>Equipa 2</th>
                </tr>
            </thead>
            <tbody id="pairsTableBody"></tbody>
        </table>
    </div>

    <div class="save-container">
        <button class="save-button" id="saveButton">Guardar</button>
    </div>

    <a href="/ListadeJogadores" class="back-button">&lt;Voltar</a>

    <script>
        // Função de inicialização
        function initializeEmparelhamento() {
            // Inicialização
            const titulo = document.getElementById('nomeCompeticao');
            const pairsTableBody = document.getElementById('pairsTableBody');
            const saveButton = document.getElementById('saveButton');
            const nomeCompeticao = "@ViewBag.NomeCompeticao";
            const competicaoId = @ViewBag.CompeticaoId;
            const isFaseEliminatoria = @(ViewBag.IsFaseEliminatoria ? "true" : "false");
            const tipoCompeticao = "@ViewBag.TipoCompeticao";
            const vencedorAbsoluto = "@ViewBag.VencedorAbsoluto";
            
            // Verificar se temos um vencedor absoluto
            if (vencedorAbsoluto && vencedorAbsoluto !== "" && tipoCompeticao !== "eliminacao") {
                // Mostrar mensagem de vencedor absoluto
                const container = document.querySelector('.table-wrapper');
                container.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <h2 style="color: white; margin-bottom: 20px;">🏆 Vencedor do Torneio 🏆</h2>
                        <div style="font-size: 24px; color: white; background-color: rgba(0,0,0,0.5); padding: 20px; border-radius: 10px;">
                            ${vencedorAbsoluto}
                        </div>
                    </div>
                `;
                // Esconder o botão de salvar
                if (saveButton) saveButton.style.display = 'none';
                return;
            }
            
            // Verificar se os elementos foram encontrados
            if (!titulo || !pairsTableBody || !saveButton) {
                console.error('Elementos não encontrados:', {
                    titulo: !!titulo,
                    pairsTableBody: !!pairsTableBody,
                    saveButton: !!saveButton
                });
                return;
            }
            
            // Mostrar o nome da competição no título
            titulo.textContent = nomeCompeticao ? `Competição: ${nomeCompeticao}` : 'Emparelhamento';
            
            // Obtem jogadores/clubes do ViewBag
            let jogadores = [];
            
            // Se for fase eliminatória, usar os vencedores passados pelo controller
            if (isFaseEliminatoria) {
                jogadores = @Html.Raw(Json.Serialize(ViewBag.Vencedores ?? new string[] {}));
                
                // Para o formato taça (eliminação), apenas permitir emparelhamento inicial
                // Fases subsequentes serão gerenciadas na página ProximosJogos
                if (jogadores.length === 0) {
                    // Verificar se é porque não há mais emparelhamentos possíveis
                    if (@Html.Raw(Json.Serialize(ViewBag.NaoHaMaisEmparelhamentos ?? false))) {
                        pairsTableBody.innerHTML = `<tr><td colspan="3">
                            <div style="text-align: center; padding: 20px;">
                                <h3 style="color: white; margin-bottom: 20px;">🏆 Competição Encerrada 🏆</h3>
                                <p style="color: white; font-size: 18px;">Não é possível gerar mais emparelhamentos pois a competição já tem um vencedor final.</p>
                                <div style="font-size: 24px; color: white; background-color: rgba(0,0,0,0.5); padding: 20px; border-radius: 10px; margin-top: 20px;">
                                    Vencedor: @ViewBag.VencedorFinal
                                </div>
                            </div>
                        </td></tr>`;
                    } else {
                        pairsTableBody.innerHTML = `<tr><td colspan="3">
                            <div style="text-align: center; padding: 20px;">
                                <p>Formato Taça: As próximas fases devem ser geradas na página "Próximos Jogos".</p>
                                <button onclick="window.location.href='/ProximosJogos?competicaoId=${competicaoId}'" style="display: inline-block; margin-top: 10px; padding: 8px 16px; background-color: white; border: 1px solid black; border-radius: 4px; text-decoration: none; color: black; cursor: pointer;">
                                    Ir para Próximos Jogos
                                </button>
                            </div>
                        </td></tr>`;
                    }
                    
                    if (saveButton) saveButton.style.display = 'none';
                    return;
                }
            } else {
                if (tipoCompeticao === 'equipas') {
                    jogadores = @Html.Raw(Json.Serialize(ViewBag.Clubes ?? new string[] {}))
                        .map(clube => ({ nome: clube }));
                } else {
                    jogadores = @Html.Raw(Json.Serialize(ViewBag.Jogadores ?? new object[] {}));
                }
            }
            
            // Atualizar o título com base no tipo de competição
            const h1Title = document.querySelector('h1');
            
            if (tipoCompeticao === 'equipas') {
                h1Title.textContent = 'Emparelhamento de Equipas';
                document.title = 'Emparelhamento de Equipas';
            } else {
                h1Title.textContent = 'Emparelhamento';
                document.title = 'Emparelhamento';
            }

            // Limpar a tabela
            pairsTableBody.innerHTML = '';

            // Função para criar uma célula de data/hora
            function createDateTimeCell() {
                const cell = document.createElement('td');
                cell.innerHTML = `
                    <input type="date" class="date-input" style="margin-right: 10px;">
                    <input type="time" class="time-input">
                `;
                return cell;
            }

            // Emparelhar jogadores
            for (let i = 0; i < jogadores.length; i += 2) {
                if (i + 1 < jogadores.length) {
                    const row = document.createElement('tr');
                    // Se for fase eliminatória, os jogadores são strings diretas
                    const clube1 = isFaseEliminatoria ? jogadores[i] : jogadores[i].nome;
                    const clube2 = isFaseEliminatoria ? jogadores[i + 1] : jogadores[i + 1].nome;
                    
                    row.innerHTML = `
                        <td>${clube1}</td>
                        ${createDateTimeCell().outerHTML}
                        <td>${clube2}</td>
                    `;
                    pairsTableBody.appendChild(row);
                }
            }

            // Handler do botão salvar
            saveButton.addEventListener('click', async () => {
                const rows = pairsTableBody.querySelectorAll('tr');
                const agendamentos = [];
                let hasError = false;

                rows.forEach(row => {
                    const clube1 = row.cells[0].textContent.trim();
                    const clube2 = row.cells[2].textContent.trim();
                    const dataInput = row.cells[1].querySelector('.date-input');
                    const horaInput = row.cells[1].querySelector('.time-input');

                    if (!dataInput.value || !horaInput.value) {
                        alert('Por favor, preencha a data e hora para todos os jogos.');
                        hasError = true;
                        return;
                    }

                    if (clube1 && clube2) {
                        agendamentos.push({
                            clube1: clube1,
                            clube2: clube2,
                            dataJogo: dataInput.value,
                            horaJogo: horaInput.value,
                            isClube: true,
                            bracket: null,
                            rondaBracket: null
                        });
                    }
                });

                if (hasError) return;

                // Preparar timestamp para o nome da competição
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');

                // Regista na lista geral de competições
                const todas = JSON.parse(localStorage.getItem('todasCompeticoes')) || [];
                // Verificar se já existe esta competição na lista
                const existeIndex = todas.findIndex(c => c.nome === nomeCompeticao);
                if (existeIndex >= 0) {
                    todas[existeIndex].dataCriacao = timestamp;
                } else {
                    todas.push({ nome: nomeCompeticao, id: competicaoId, dataCriacao: timestamp });
                }
                localStorage.setItem('todasCompeticoes', JSON.stringify(todas));

                // Limpa o temporário
                localStorage.removeItem('jogadoresParaEmparelhar');

                // Preparar dados para enviar ao servidor
                const emparelhamentosParaEnviar = agendamentos.map(agendamento => ({
                    clube1: agendamento.clube1,
                    clube2: agendamento.clube2,
                    dataJogo: agendamento.dataJogo,
                    horaJogo: agendamento.horaJogo,
                    isClube: agendamento.isClube,
                    bracket: agendamento.bracket,
                    rondaBracket: agendamento.rondaBracket
                }));

                try {
                    const response = await fetch('/Emparelhamento/SalvarEmparelhamentos', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            competicaoId: competicaoId,
                            nomeCompeticao: nomeCompeticao,
                            emparelhamentos: emparelhamentosParaEnviar
                        })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        alert(result.mensagem || 'Emparelhamentos salvos com sucesso!');
                        window.location.href = `/Menu?competicaoId=${competicaoId}`;
                    } else {
                        alert(result.mensagem || 'Erro ao salvar emparelhamentos.');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao salvar emparelhamentos.');
                }
            });
        }

        // Inicializar
        initializeEmparelhamento();
    </script>
</body>
</html>
